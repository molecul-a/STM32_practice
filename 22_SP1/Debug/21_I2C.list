
21_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000508  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080006a0  080006a0  000016a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080006b8  080006b8  000016c0  2**0
                  CONTENTS
  4 .ARM          00000000  080006b8  080006b8  000016c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006b8  080006c0  000016c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006b8  080006b8  000016b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080006bc  080006bc  000016bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000016c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080006c0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080006c0  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008d7  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003b9  00000000  00000000  00001fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e8  00000000  00000000  00002380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000099  00000000  00000000  00002468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000010dc  00000000  00000000  00002501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001992  00000000  00000000  000035dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053b10  00000000  00000000  00004f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00058a7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000214  00000000  00000000  00058ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00058cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000688 	.word	0x08000688

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000688 	.word	0x08000688

080001d8 <I2C1_init>:
#define CR1_STOP				(1U<<9)
#define SR1_RXNE				(1U<<6)
#define SR1_BTF					(1U<<2)

void I2C1_init(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	//Enable clock to GPIOB
	RCC->AHB1ENR |= GPIOBEN;
 80001dc:	4b4b      	ldr	r3, [pc, #300]	@ (800030c <I2C1_init+0x134>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e0:	4a4a      	ldr	r2, [pc, #296]	@ (800030c <I2C1_init+0x134>)
 80001e2:	f043 0302 	orr.w	r3, r3, #2
 80001e6:	6313      	str	r3, [r2, #48]	@ 0x30
	//Set PB8 and PB9 mode to alternate function
	//PB8
	GPIOB->MODER &=~(1U<<16);
 80001e8:	4b49      	ldr	r3, [pc, #292]	@ (8000310 <I2C1_init+0x138>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a48      	ldr	r2, [pc, #288]	@ (8000310 <I2C1_init+0x138>)
 80001ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<17);
 80001f4:	4b46      	ldr	r3, [pc, #280]	@ (8000310 <I2C1_init+0x138>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a45      	ldr	r2, [pc, #276]	@ (8000310 <I2C1_init+0x138>)
 80001fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80001fe:	6013      	str	r3, [r2, #0]
	//PB9
	GPIOB->MODER &=~(1U<<18);
 8000200:	4b43      	ldr	r3, [pc, #268]	@ (8000310 <I2C1_init+0x138>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a42      	ldr	r2, [pc, #264]	@ (8000310 <I2C1_init+0x138>)
 8000206:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800020a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<19);
 800020c:	4b40      	ldr	r3, [pc, #256]	@ (8000310 <I2C1_init+0x138>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a3f      	ldr	r2, [pc, #252]	@ (8000310 <I2C1_init+0x138>)
 8000212:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000216:	6013      	str	r3, [r2, #0]
	//Set PB8 and PB9 alternate function type to I2C (AF4)
	//PB8 TO AF4
	GPIOB->AFR[1] &=~(1U<<0);
 8000218:	4b3d      	ldr	r3, [pc, #244]	@ (8000310 <I2C1_init+0x138>)
 800021a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800021c:	4a3c      	ldr	r2, [pc, #240]	@ (8000310 <I2C1_init+0x138>)
 800021e:	f023 0301 	bic.w	r3, r3, #1
 8000222:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &=~(1U<<1);
 8000224:	4b3a      	ldr	r3, [pc, #232]	@ (8000310 <I2C1_init+0x138>)
 8000226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000228:	4a39      	ldr	r2, [pc, #228]	@ (8000310 <I2C1_init+0x138>)
 800022a:	f023 0302 	bic.w	r3, r3, #2
 800022e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (1U<<2);
 8000230:	4b37      	ldr	r3, [pc, #220]	@ (8000310 <I2C1_init+0x138>)
 8000232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000234:	4a36      	ldr	r2, [pc, #216]	@ (8000310 <I2C1_init+0x138>)
 8000236:	f043 0304 	orr.w	r3, r3, #4
 800023a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &=~(1U<<3);
 800023c:	4b34      	ldr	r3, [pc, #208]	@ (8000310 <I2C1_init+0x138>)
 800023e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000240:	4a33      	ldr	r2, [pc, #204]	@ (8000310 <I2C1_init+0x138>)
 8000242:	f023 0308 	bic.w	r3, r3, #8
 8000246:	6253      	str	r3, [r2, #36]	@ 0x24
	//PB9 TO AF4
	GPIOB->AFR[1] &=~(1U<<4);
 8000248:	4b31      	ldr	r3, [pc, #196]	@ (8000310 <I2C1_init+0x138>)
 800024a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800024c:	4a30      	ldr	r2, [pc, #192]	@ (8000310 <I2C1_init+0x138>)
 800024e:	f023 0310 	bic.w	r3, r3, #16
 8000252:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &=~(1U<<5);
 8000254:	4b2e      	ldr	r3, [pc, #184]	@ (8000310 <I2C1_init+0x138>)
 8000256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000258:	4a2d      	ldr	r2, [pc, #180]	@ (8000310 <I2C1_init+0x138>)
 800025a:	f023 0320 	bic.w	r3, r3, #32
 800025e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (1U<<6);
 8000260:	4b2b      	ldr	r3, [pc, #172]	@ (8000310 <I2C1_init+0x138>)
 8000262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000264:	4a2a      	ldr	r2, [pc, #168]	@ (8000310 <I2C1_init+0x138>)
 8000266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800026a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &=~(1U<<7);
 800026c:	4b28      	ldr	r3, [pc, #160]	@ (8000310 <I2C1_init+0x138>)
 800026e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000270:	4a27      	ldr	r2, [pc, #156]	@ (8000310 <I2C1_init+0x138>)
 8000272:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000276:	6253      	str	r3, [r2, #36]	@ 0x24

	//Set PB8 and PB9 output type to open drain
	//PB8
	GPIOB->OTYPER |= (1U<<8);
 8000278:	4b25      	ldr	r3, [pc, #148]	@ (8000310 <I2C1_init+0x138>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	4a24      	ldr	r2, [pc, #144]	@ (8000310 <I2C1_init+0x138>)
 800027e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000282:	6053      	str	r3, [r2, #4]
	//PB9
	GPIOB->OTYPER |= (1U<<9);
 8000284:	4b22      	ldr	r3, [pc, #136]	@ (8000310 <I2C1_init+0x138>)
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	4a21      	ldr	r2, [pc, #132]	@ (8000310 <I2C1_init+0x138>)
 800028a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800028e:	6053      	str	r3, [r2, #4]
	//Enable Pullup for PB8 and PB9
	//PB8
	GPIOB->PUPDR |= (1U<<16);
 8000290:	4b1f      	ldr	r3, [pc, #124]	@ (8000310 <I2C1_init+0x138>)
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	4a1e      	ldr	r2, [pc, #120]	@ (8000310 <I2C1_init+0x138>)
 8000296:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800029a:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &=~ (1U<<17);
 800029c:	4b1c      	ldr	r3, [pc, #112]	@ (8000310 <I2C1_init+0x138>)
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000310 <I2C1_init+0x138>)
 80002a2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80002a6:	60d3      	str	r3, [r2, #12]
	//PB9
	GPIOB->PUPDR |= (1U<<18);
 80002a8:	4b19      	ldr	r3, [pc, #100]	@ (8000310 <I2C1_init+0x138>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	4a18      	ldr	r2, [pc, #96]	@ (8000310 <I2C1_init+0x138>)
 80002ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80002b2:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &=~(1U<<19);
 80002b4:	4b16      	ldr	r3, [pc, #88]	@ (8000310 <I2C1_init+0x138>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	4a15      	ldr	r2, [pc, #84]	@ (8000310 <I2C1_init+0x138>)
 80002ba:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80002be:	60d3      	str	r3, [r2, #12]



	//Enable clock access to I2C
	RCC->APB1ENR |= I2C1EN;
 80002c0:	4b12      	ldr	r3, [pc, #72]	@ (800030c <I2C1_init+0x134>)
 80002c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002c4:	4a11      	ldr	r2, [pc, #68]	@ (800030c <I2C1_init+0x134>)
 80002c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002ca:	6413      	str	r3, [r2, #64]	@ 0x40
	//Enter reset mode
	I2C1->CR1 |= (1U<<15);
 80002cc:	4b11      	ldr	r3, [pc, #68]	@ (8000314 <I2C1_init+0x13c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a10      	ldr	r2, [pc, #64]	@ (8000314 <I2C1_init+0x13c>)
 80002d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80002d6:	6013      	str	r3, [r2, #0]
	//Come out of reset mode
	I2C1->CR1 &=~(1U<<15);
 80002d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000314 <I2C1_init+0x13c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000314 <I2C1_init+0x13c>)
 80002de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80002e2:	6013      	str	r3, [r2, #0]
	//Set Peripheral clock frequency
	I2C1->CR2 = (1U<<4); // 16MHz
 80002e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000314 <I2C1_init+0x13c>)
 80002e6:	2210      	movs	r2, #16
 80002e8:	605a      	str	r2, [r3, #4]
	//Set I2C to standard mode, 100khz clock
	I2C1->CCR = I2C_100Khz;
 80002ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000314 <I2C1_init+0x13c>)
 80002ec:	2250      	movs	r2, #80	@ 0x50
 80002ee:	61da      	str	r2, [r3, #28]
	//Set rise time
	I2C1->TRISE = SD_MODE_MAX_RISE_TIME;
 80002f0:	4b08      	ldr	r3, [pc, #32]	@ (8000314 <I2C1_init+0x13c>)
 80002f2:	2211      	movs	r2, #17
 80002f4:	621a      	str	r2, [r3, #32]
	//Enable I2C module
	I2C1->CR1 |= I2C_CR1_PE;
 80002f6:	4b07      	ldr	r3, [pc, #28]	@ (8000314 <I2C1_init+0x13c>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a06      	ldr	r2, [pc, #24]	@ (8000314 <I2C1_init+0x13c>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6013      	str	r3, [r2, #0]
}
 8000302:	bf00      	nop
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	40023800 	.word	0x40023800
 8000310:	40020400 	.word	0x40020400
 8000314:	40005400 	.word	0x40005400

08000318 <I2C1_burstWrite>:
	}

}

void I2C1_burstWrite(char saddr, char maddr, int n, char* data)
{
 8000318:	b480      	push	{r7}
 800031a:	b087      	sub	sp, #28
 800031c:	af00      	add	r7, sp, #0
 800031e:	60ba      	str	r2, [r7, #8]
 8000320:	607b      	str	r3, [r7, #4]
 8000322:	4603      	mov	r3, r0
 8000324:	73fb      	strb	r3, [r7, #15]
 8000326:	460b      	mov	r3, r1
 8000328:	73bb      	strb	r3, [r7, #14]
	volatile int tmp; //temporary variable for clean status register
	//Wait until bus not busy
	while(I2C1->SR2 & SR2_BUSY){}
 800032a:	bf00      	nop
 800032c:	4b2a      	ldr	r3, [pc, #168]	@ (80003d8 <I2C1_burstWrite+0xc0>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	f003 0302 	and.w	r3, r3, #2
 8000334:	2b00      	cmp	r3, #0
 8000336:	d1f9      	bne.n	800032c <I2C1_burstWrite+0x14>
	//Generate start
	I2C1->CR1 |= CR1_START;
 8000338:	4b27      	ldr	r3, [pc, #156]	@ (80003d8 <I2C1_burstWrite+0xc0>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a26      	ldr	r2, [pc, #152]	@ (80003d8 <I2C1_burstWrite+0xc0>)
 800033e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000342:	6013      	str	r3, [r2, #0]
	//Wait until start flag is set
	while(!(I2C1->SR1 & SR1_SB)){}
 8000344:	bf00      	nop
 8000346:	4b24      	ldr	r3, [pc, #144]	@ (80003d8 <I2C1_burstWrite+0xc0>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	2b00      	cmp	r3, #0
 8000350:	d0f9      	beq.n	8000346 <I2C1_burstWrite+0x2e>
	//Transmit slave address and WRITE
	I2C1->DR = saddr << 1;
 8000352:	7bfb      	ldrb	r3, [r7, #15]
 8000354:	4a20      	ldr	r2, [pc, #128]	@ (80003d8 <I2C1_burstWrite+0xc0>)
 8000356:	005b      	lsls	r3, r3, #1
 8000358:	6113      	str	r3, [r2, #16]
	//Wait until addr flag is set
	while(!(I2C1->SR1 & SR1_ADDR)){}
 800035a:	bf00      	nop
 800035c:	4b1e      	ldr	r3, [pc, #120]	@ (80003d8 <I2C1_burstWrite+0xc0>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	f003 0302 	and.w	r3, r3, #2
 8000364:	2b00      	cmp	r3, #0
 8000366:	d0f9      	beq.n	800035c <I2C1_burstWrite+0x44>
	//Clear addr flag
	tmp = I2C1->SR2;
 8000368:	4b1b      	ldr	r3, [pc, #108]	@ (80003d8 <I2C1_burstWrite+0xc0>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	613b      	str	r3, [r7, #16]
	//Wait until data register is empty
	while(!(I2C1->SR1 & SR1_TXE));
 800036e:	bf00      	nop
 8000370:	4b19      	ldr	r3, [pc, #100]	@ (80003d8 <I2C1_burstWrite+0xc0>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000378:	2b00      	cmp	r3, #0
 800037a:	d0f9      	beq.n	8000370 <I2C1_burstWrite+0x58>
	//Send memory address
	I2C1->DR = maddr;
 800037c:	4a16      	ldr	r2, [pc, #88]	@ (80003d8 <I2C1_burstWrite+0xc0>)
 800037e:	7bbb      	ldrb	r3, [r7, #14]
 8000380:	6113      	str	r3, [r2, #16]

	for(int i=0; i<n; i++)
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]
 8000386:	e00f      	b.n	80003a8 <I2C1_burstWrite+0x90>
	{
		//Wait until data register is empty
		while(!(I2C1->SR1 & SR1_TXE));
 8000388:	bf00      	nop
 800038a:	4b13      	ldr	r3, [pc, #76]	@ (80003d8 <I2C1_burstWrite+0xc0>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000392:	2b00      	cmp	r3, #0
 8000394:	d0f9      	beq.n	800038a <I2C1_burstWrite+0x72>
		//Transmit memory address
		I2C1->DR = *data++;
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	1c5a      	adds	r2, r3, #1
 800039a:	607a      	str	r2, [r7, #4]
 800039c:	781a      	ldrb	r2, [r3, #0]
 800039e:	4b0e      	ldr	r3, [pc, #56]	@ (80003d8 <I2C1_burstWrite+0xc0>)
 80003a0:	611a      	str	r2, [r3, #16]
	for(int i=0; i<n; i++)
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	3301      	adds	r3, #1
 80003a6:	617b      	str	r3, [r7, #20]
 80003a8:	697a      	ldr	r2, [r7, #20]
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	dbeb      	blt.n	8000388 <I2C1_burstWrite+0x70>
	}

	//Wait until transfer finished
	while(!(I2C1->SR1 & SR1_BTF)){}
 80003b0:	bf00      	nop
 80003b2:	4b09      	ldr	r3, [pc, #36]	@ (80003d8 <I2C1_burstWrite+0xc0>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	f003 0304 	and.w	r3, r3, #4
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d0f9      	beq.n	80003b2 <I2C1_burstWrite+0x9a>
	 //Generate stop
	 I2C1->CR1 |= CR1_STOP;
 80003be:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <I2C1_burstWrite+0xc0>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4a05      	ldr	r2, [pc, #20]	@ (80003d8 <I2C1_burstWrite+0xc0>)
 80003c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003c8:	6013      	str	r3, [r2, #0]
}
 80003ca:	bf00      	nop
 80003cc:	371c      	adds	r7, #28
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40005400 	.word	0x40005400

080003dc <lcd_send_cmd>:
 */
#include "lcd1602.h"


void lcd_send_cmd (char cmd)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
  data_u = (cmd&0xf0);
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	f023 030f 	bic.w	r3, r3, #15
 80003ec:	73fb      	strb	r3, [r7, #15]
  data_l = ((cmd<<8)&0xf0);
 80003ee:	2300      	movs	r3, #0
 80003f0:	73bb      	strb	r3, [r7, #14]

  uint8_t data_t[4];
  data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 80003f2:	7bfb      	ldrb	r3, [r7, #15]
 80003f4:	f043 030c 	orr.w	r3, r3, #12
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	723b      	strb	r3, [r7, #8]
  data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
 80003fe:	f043 0308 	orr.w	r3, r3, #8
 8000402:	b2db      	uxtb	r3, r3
 8000404:	727b      	strb	r3, [r7, #9]

  data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000406:	7bbb      	ldrb	r3, [r7, #14]
 8000408:	f043 030c 	orr.w	r3, r3, #12
 800040c:	b2db      	uxtb	r3, r3
 800040e:	72bb      	strb	r3, [r7, #10]
  data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8000410:	7bbb      	ldrb	r3, [r7, #14]
 8000412:	f043 0308 	orr.w	r3, r3, #8
 8000416:	b2db      	uxtb	r3, r3
 8000418:	72fb      	strb	r3, [r7, #11]

  I2C1_burstWrite(SLAVE_ADDRESS_LCD,0,4,(uint8_t *) data_t);
 800041a:	f107 0308 	add.w	r3, r7, #8
 800041e:	2204      	movs	r2, #4
 8000420:	2100      	movs	r1, #0
 8000422:	2027      	movs	r0, #39	@ 0x27
 8000424:	f7ff ff78 	bl	8000318 <I2C1_burstWrite>
  //HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
}
 8000428:	bf00      	nop
 800042a:	3710      	adds	r7, #16
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}

08000430 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	4603      	mov	r3, r0
 8000438:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	f023 030f 	bic.w	r3, r3, #15
 8000440:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	011b      	lsls	r3, r3, #4
 8000446:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1 -> bxxxx1101
 8000448:	7bfb      	ldrb	r3, [r7, #15]
 800044a:	f043 030d 	orr.w	r3, r3, #13
 800044e:	b2db      	uxtb	r3, r3
 8000450:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1 -> bxxxx1001
 8000452:	7bfb      	ldrb	r3, [r7, #15]
 8000454:	f043 0309 	orr.w	r3, r3, #9
 8000458:	b2db      	uxtb	r3, r3
 800045a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1 -> bxxxx1101
 800045c:	7bbb      	ldrb	r3, [r7, #14]
 800045e:	f043 030d 	orr.w	r3, r3, #13
 8000462:	b2db      	uxtb	r3, r3
 8000464:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1 -> bxxxx1001
 8000466:	7bbb      	ldrb	r3, [r7, #14]
 8000468:	f043 0309 	orr.w	r3, r3, #9
 800046c:	b2db      	uxtb	r3, r3
 800046e:	72fb      	strb	r3, [r7, #11]
	I2C1_burstWrite(SLAVE_ADDRESS_LCD,0,4,(uint8_t *) data_t);
 8000470:	f107 0308 	add.w	r3, r7, #8
 8000474:	2204      	movs	r2, #4
 8000476:	2100      	movs	r1, #0
 8000478:	2027      	movs	r0, #39	@ 0x27
 800047a:	f7ff ff4d 	bl	8000318 <I2C1_burstWrite>
	//HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
}
 800047e:	bf00      	nop
 8000480:	3710      	adds	r7, #16
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}

08000486 <lcd_init>:

void lcd_init (void)
	{
 8000486:	b580      	push	{r7, lr}
 8000488:	af00      	add	r7, sp, #0
	I2C1_init();
 800048a:	f7ff fea5 	bl	80001d8 <I2C1_init>
	// 4 bit initialization
	systickDelayMs(50);  // wait for >40ms
 800048e:	2032      	movs	r0, #50	@ 0x32
 8000490:	f000 f882 	bl	8000598 <systickDelayMs>
	lcd_send_cmd (0x30);
 8000494:	2030      	movs	r0, #48	@ 0x30
 8000496:	f7ff ffa1 	bl	80003dc <lcd_send_cmd>
	systickDelayMs(5);  // wait for >4.1ms
 800049a:	2005      	movs	r0, #5
 800049c:	f000 f87c 	bl	8000598 <systickDelayMs>
	lcd_send_cmd (0x30);
 80004a0:	2030      	movs	r0, #48	@ 0x30
 80004a2:	f7ff ff9b 	bl	80003dc <lcd_send_cmd>
	systickDelayMs(1);  // wait for >100us
 80004a6:	2001      	movs	r0, #1
 80004a8:	f000 f876 	bl	8000598 <systickDelayMs>
	lcd_send_cmd (0x30);
 80004ac:	2030      	movs	r0, #48	@ 0x30
 80004ae:	f7ff ff95 	bl	80003dc <lcd_send_cmd>
	systickDelayMs(10);
 80004b2:	200a      	movs	r0, #10
 80004b4:	f000 f870 	bl	8000598 <systickDelayMs>
	lcd_send_cmd (0x20);  // 4bit mode
 80004b8:	2020      	movs	r0, #32
 80004ba:	f7ff ff8f 	bl	80003dc <lcd_send_cmd>
	systickDelayMs(10);
 80004be:	200a      	movs	r0, #10
 80004c0:	f000 f86a 	bl	8000598 <systickDelayMs>

	// display initialization
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80004c4:	2028      	movs	r0, #40	@ 0x28
 80004c6:	f7ff ff89 	bl	80003dc <lcd_send_cmd>
	systickDelayMs(1);
 80004ca:	2001      	movs	r0, #1
 80004cc:	f000 f864 	bl	8000598 <systickDelayMs>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80004d0:	2008      	movs	r0, #8
 80004d2:	f7ff ff83 	bl	80003dc <lcd_send_cmd>
	systickDelayMs(1);
 80004d6:	2001      	movs	r0, #1
 80004d8:	f000 f85e 	bl	8000598 <systickDelayMs>
	lcd_send_cmd (0x01);  // clear display
 80004dc:	2001      	movs	r0, #1
 80004de:	f7ff ff7d 	bl	80003dc <lcd_send_cmd>
	systickDelayMs(2);
 80004e2:	2002      	movs	r0, #2
 80004e4:	f000 f858 	bl	8000598 <systickDelayMs>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80004e8:	2006      	movs	r0, #6
 80004ea:	f7ff ff77 	bl	80003dc <lcd_send_cmd>
	systickDelayMs(1);
 80004ee:	2001      	movs	r0, #1
 80004f0:	f000 f852 	bl	8000598 <systickDelayMs>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80004f4:	200c      	movs	r0, #12
 80004f6:	f7ff ff71 	bl	80003dc <lcd_send_cmd>
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}

080004fe <lcd_send_string>:
void lcd_send_string (char *str)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000506:	e006      	b.n	8000516 <lcd_send_string+0x18>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	1c5a      	adds	r2, r3, #1
 800050c:	607a      	str	r2, [r7, #4]
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff ff8d 	bl	8000430 <lcd_send_data>
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d1f4      	bne.n	8000508 <lcd_send_string+0xa>
}
 800051e:	bf00      	nop
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
    switch (row)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d003      	beq.n	8000540 <lcd_put_cur+0x18>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d005      	beq.n	800054a <lcd_put_cur+0x22>
 800053e:	e009      	b.n	8000554 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000546:	603b      	str	r3, [r7, #0]
            break;
 8000548:	e004      	b.n	8000554 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000550:	603b      	str	r3, [r7, #0]
            break;
 8000552:	bf00      	nop
    }
    lcd_send_cmd (col);
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	b2db      	uxtb	r3, r3
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ff3f 	bl	80003dc <lcd_send_cmd>
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <main>:
#include "lcd1602.h"



int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0

	lcd_init ();
 800056c:	f7ff ff8b 	bl	8000486 <lcd_init>
	lcd_put_cur(0, 0);
 8000570:	2100      	movs	r1, #0
 8000572:	2000      	movs	r0, #0
 8000574:	f7ff ffd8 	bl	8000528 <lcd_put_cur>
	lcd_send_string ("HELLO WORLD");
 8000578:	4805      	ldr	r0, [pc, #20]	@ (8000590 <main+0x28>)
 800057a:	f7ff ffc0 	bl	80004fe <lcd_send_string>
	lcd_put_cur(1, 0);
 800057e:	2100      	movs	r1, #0
 8000580:	2001      	movs	r0, #1
 8000582:	f7ff ffd1 	bl	8000528 <lcd_put_cur>
	lcd_send_string("BLEAT!!!");
 8000586:	4803      	ldr	r0, [pc, #12]	@ (8000594 <main+0x2c>)
 8000588:	f7ff ffb9 	bl	80004fe <lcd_send_string>

	while(1)
 800058c:	bf00      	nop
 800058e:	e7fd      	b.n	800058c <main+0x24>
 8000590:	080006a0 	.word	0x080006a0
 8000594:	080006ac 	.word	0x080006ac

08000598 <systickDelayMs>:
#define SYSTICK_CTRL_COUNTFLAG	(1U<<16)
#define SYSTICK_CTRL_TICKINT	(1U<<1)
#define ONE_SEC_LOAD			16000000

void systickDelayMs(int delay)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	//Configure SysTick
	//Reload with number of clocks per millisecond
	SysTick->LOAD	= SYSTICK_LOAD_VALUE;
 80005a0:	4b11      	ldr	r3, [pc, #68]	@ (80005e8 <systickDelayMs+0x50>)
 80005a2:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80005a6:	605a      	str	r2, [r3, #4]
	//Clear SysTick current value register
	SysTick->VAL = 0;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	@ (80005e8 <systickDelayMs+0x50>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
	//Enable SysTick and select internal clock source
	SysTick->CTRL = SYSTICK_CTRL_ENABLE | SYSTICK_CTRL_CLKSRC;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	@ (80005e8 <systickDelayMs+0x50>)
 80005b0:	2205      	movs	r2, #5
 80005b2:	601a      	str	r2, [r3, #0]

	for(int i = 0; i<delay; i++)
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	e009      	b.n	80005ce <systickDelayMs+0x36>
	{
		//Wait until the count flag is set
		while((SysTick->CTRL & SYSTICK_CTRL_COUNTFLAG) == 0){}
 80005ba:	bf00      	nop
 80005bc:	4b0a      	ldr	r3, [pc, #40]	@ (80005e8 <systickDelayMs+0x50>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d0f9      	beq.n	80005bc <systickDelayMs+0x24>
	for(int i = 0; i<delay; i++)
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	3301      	adds	r3, #1
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fa      	ldr	r2, [r7, #12]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	dbf1      	blt.n	80005ba <systickDelayMs+0x22>
	}
	SysTick->CTRL = 0;
 80005d6:	4b04      	ldr	r3, [pc, #16]	@ (80005e8 <systickDelayMs+0x50>)
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
}
 80005dc:	bf00      	nop
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	e000e010 	.word	0xe000e010

080005ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005ec:	480d      	ldr	r0, [pc, #52]	@ (8000624 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f4:	480c      	ldr	r0, [pc, #48]	@ (8000628 <LoopForever+0x6>)
  ldr r1, =_edata
 80005f6:	490d      	ldr	r1, [pc, #52]	@ (800062c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000630 <LoopForever+0xe>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005fc:	e002      	b.n	8000604 <LoopCopyDataInit>

080005fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000602:	3304      	adds	r3, #4

08000604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000608:	d3f9      	bcc.n	80005fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060a:	4a0a      	ldr	r2, [pc, #40]	@ (8000634 <LoopForever+0x12>)
  ldr r4, =_ebss
 800060c:	4c0a      	ldr	r4, [pc, #40]	@ (8000638 <LoopForever+0x16>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000610:	e001      	b.n	8000616 <LoopFillZerobss>

08000612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000614:	3204      	adds	r2, #4

08000616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000618:	d3fb      	bcc.n	8000612 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800061a:	f000 f811 	bl	8000640 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800061e:	f7ff ffa3 	bl	8000568 <main>

08000622 <LoopForever>:

LoopForever:
  b LoopForever
 8000622:	e7fe      	b.n	8000622 <LoopForever>
  ldr   r0, =_estack
 8000624:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800062c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000630:	080006c0 	.word	0x080006c0
  ldr r2, =_sbss
 8000634:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000638:	2000001c 	.word	0x2000001c

0800063c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800063c:	e7fe      	b.n	800063c <ADC_IRQHandler>
	...

08000640 <__libc_init_array>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	4d0d      	ldr	r5, [pc, #52]	@ (8000678 <__libc_init_array+0x38>)
 8000644:	4c0d      	ldr	r4, [pc, #52]	@ (800067c <__libc_init_array+0x3c>)
 8000646:	1b64      	subs	r4, r4, r5
 8000648:	10a4      	asrs	r4, r4, #2
 800064a:	2600      	movs	r6, #0
 800064c:	42a6      	cmp	r6, r4
 800064e:	d109      	bne.n	8000664 <__libc_init_array+0x24>
 8000650:	4d0b      	ldr	r5, [pc, #44]	@ (8000680 <__libc_init_array+0x40>)
 8000652:	4c0c      	ldr	r4, [pc, #48]	@ (8000684 <__libc_init_array+0x44>)
 8000654:	f000 f818 	bl	8000688 <_init>
 8000658:	1b64      	subs	r4, r4, r5
 800065a:	10a4      	asrs	r4, r4, #2
 800065c:	2600      	movs	r6, #0
 800065e:	42a6      	cmp	r6, r4
 8000660:	d105      	bne.n	800066e <__libc_init_array+0x2e>
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f855 3b04 	ldr.w	r3, [r5], #4
 8000668:	4798      	blx	r3
 800066a:	3601      	adds	r6, #1
 800066c:	e7ee      	b.n	800064c <__libc_init_array+0xc>
 800066e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000672:	4798      	blx	r3
 8000674:	3601      	adds	r6, #1
 8000676:	e7f2      	b.n	800065e <__libc_init_array+0x1e>
 8000678:	080006b8 	.word	0x080006b8
 800067c:	080006b8 	.word	0x080006b8
 8000680:	080006b8 	.word	0x080006b8
 8000684:	080006bc 	.word	0x080006bc

08000688 <_init>:
 8000688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800068a:	bf00      	nop
 800068c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800068e:	bc08      	pop	{r3}
 8000690:	469e      	mov	lr, r3
 8000692:	4770      	bx	lr

08000694 <_fini>:
 8000694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000696:	bf00      	nop
 8000698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800069a:	bc08      	pop	{r3}
 800069c:	469e      	mov	lr, r3
 800069e:	4770      	bx	lr
