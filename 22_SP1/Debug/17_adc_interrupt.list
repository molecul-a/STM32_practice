
17_adc_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013f4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001594  08001594  00002594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015dc  080015dc  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  080015dc  080015dc  000025dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080015e4  080015e4  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015e4  080015e4  000025e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080015e8  080015e8  000025e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080015ec  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08001648  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08001648  000031cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001d03  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000885  00000000  00000000  00004d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00005618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000148  00000000  00000000  000057f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fcc8  00000000  00000000  00005940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002570  00000000  00000000  00015608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000560cd  00000000  00000000  00017b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006dc45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d48  00000000  00000000  0006dc88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0006e9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800157c 	.word	0x0800157c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800157c 	.word	0x0800157c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	@ (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <pa1_adc_interrupt_init>:
	//Enable ADC module
	ADC1->CR2 |= ADC_CR2_ADON;
}

void pa1_adc_interrupt_init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	//*******Configure the ADC GPIO pin*******
	//Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80002c0:	4b17      	ldr	r3, [pc, #92]	@ (8000320 <pa1_adc_interrupt_init+0x64>)
 80002c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c4:	4a16      	ldr	r2, [pc, #88]	@ (8000320 <pa1_adc_interrupt_init+0x64>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6313      	str	r3, [r2, #48]	@ 0x30
	//Set the mode of PA1 to analog
	GPIOA->MODER |= (1U<<2);
 80002cc:	4b15      	ldr	r3, [pc, #84]	@ (8000324 <pa1_adc_interrupt_init+0x68>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a14      	ldr	r2, [pc, #80]	@ (8000324 <pa1_adc_interrupt_init+0x68>)
 80002d2:	f043 0304 	orr.w	r3, r3, #4
 80002d6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<3);
 80002d8:	4b12      	ldr	r3, [pc, #72]	@ (8000324 <pa1_adc_interrupt_init+0x68>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a11      	ldr	r2, [pc, #68]	@ (8000324 <pa1_adc_interrupt_init+0x68>)
 80002de:	f043 0308 	orr.w	r3, r3, #8
 80002e2:	6013      	str	r3, [r2, #0]
	//*******Configure the ADC module*********
	//Enable clock access to ADC
	RCC->APB2ENR |= ADC1EN;
 80002e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000320 <pa1_adc_interrupt_init+0x64>)
 80002e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000320 <pa1_adc_interrupt_init+0x64>)
 80002ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002ee:	6453      	str	r3, [r2, #68]	@ 0x44
	//Enable EOC to ADC1 in CR1
	ADC1->CR1 |= ADC_CR1_EOCIE;
 80002f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000328 <pa1_adc_interrupt_init+0x6c>)
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000328 <pa1_adc_interrupt_init+0x6c>)
 80002f6:	f043 0320 	orr.w	r3, r3, #32
 80002fa:	6053      	str	r3, [r2, #4]
	//Enable ADC1 interruption in NVIC
	NVIC_EnableIRQ(ADC_IRQn);
 80002fc:	2012      	movs	r0, #18
 80002fe:	f7ff ffbf 	bl	8000280 <__NVIC_EnableIRQ>
	//Conversion sequence start
	ADC1->SQR3 = ADC_CH1;
 8000302:	4b09      	ldr	r3, [pc, #36]	@ (8000328 <pa1_adc_interrupt_init+0x6c>)
 8000304:	2201      	movs	r2, #1
 8000306:	635a      	str	r2, [r3, #52]	@ 0x34
	//Conversion sequence length
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 8000308:	4b07      	ldr	r3, [pc, #28]	@ (8000328 <pa1_adc_interrupt_init+0x6c>)
 800030a:	2200      	movs	r2, #0
 800030c:	62da      	str	r2, [r3, #44]	@ 0x2c
	//Enable ADC module
	ADC1->CR2 |= ADC_CR2_ADON;
 800030e:	4b06      	ldr	r3, [pc, #24]	@ (8000328 <pa1_adc_interrupt_init+0x6c>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	4a05      	ldr	r2, [pc, #20]	@ (8000328 <pa1_adc_interrupt_init+0x6c>)
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6093      	str	r3, [r2, #8]
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800
 8000324:	40020000 	.word	0x40020000
 8000328:	40012000 	.word	0x40012000

0800032c <start_conversion>:

void start_conversion(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	//Enable continuous conversion
	ADC1->CR2 |= ADC_CR2_CONT;
 8000330:	4b08      	ldr	r3, [pc, #32]	@ (8000354 <start_conversion+0x28>)
 8000332:	689b      	ldr	r3, [r3, #8]
 8000334:	4a07      	ldr	r2, [pc, #28]	@ (8000354 <start_conversion+0x28>)
 8000336:	f043 0302 	orr.w	r3, r3, #2
 800033a:	6093      	str	r3, [r2, #8]
	//Start ADC conversion
	ADC1->CR2 |= ADC_CR2_SWSTART;
 800033c:	4b05      	ldr	r3, [pc, #20]	@ (8000354 <start_conversion+0x28>)
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	4a04      	ldr	r2, [pc, #16]	@ (8000354 <start_conversion+0x28>)
 8000342:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000346:	6093      	str	r3, [r2, #8]
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40012000 	.word	0x40012000

08000358 <main>:
#define GPIOA_5			(1U<<5)
#define LED_PIN			GPIOA_5

uint32_t sensor_value;
int main(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	// ENABLE CKL ACCESS TO GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 800035c:	4b0c      	ldr	r3, [pc, #48]	@ (8000390 <main+0x38>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000360:	4a0b      	ldr	r2, [pc, #44]	@ (8000390 <main+0x38>)
 8000362:	f043 0301 	orr.w	r3, r3, #1
 8000366:	6313      	str	r3, [r2, #48]	@ 0x30
	// SET PA5 AS OUTPUT PIN
	GPIOA->MODER |= (1U<<10);
 8000368:	4b0a      	ldr	r3, [pc, #40]	@ (8000394 <main+0x3c>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a09      	ldr	r2, [pc, #36]	@ (8000394 <main+0x3c>)
 800036e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000372:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 8000374:	4b07      	ldr	r3, [pc, #28]	@ (8000394 <main+0x3c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a06      	ldr	r2, [pc, #24]	@ (8000394 <main+0x3c>)
 800037a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800037e:	6013      	str	r3, [r2, #0]

	uart2_tx_init();
 8000380:	f000 f918 	bl	80005b4 <uart2_tx_init>
	pa1_adc_interrupt_init();
 8000384:	f7ff ff9a 	bl	80002bc <pa1_adc_interrupt_init>
	start_conversion();
 8000388:	f7ff ffd0 	bl	800032c <start_conversion>
	while(1)
 800038c:	bf00      	nop
 800038e:	e7fd      	b.n	800038c <main+0x34>
 8000390:	40023800 	.word	0x40023800
 8000394:	40020000 	.word	0x40020000

08000398 <adc_callback>:

	}
}

static void adc_callback(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	sensor_value = ADC1->DR;
 800039c:	4b0a      	ldr	r3, [pc, #40]	@ (80003c8 <adc_callback+0x30>)
 800039e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003a0:	4a0a      	ldr	r2, [pc, #40]	@ (80003cc <adc_callback+0x34>)
 80003a2:	6013      	str	r3, [r2, #0]
	GPIOA->ODR ^= LED_PIN;
 80003a4:	4b0a      	ldr	r3, [pc, #40]	@ (80003d0 <adc_callback+0x38>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	4a09      	ldr	r2, [pc, #36]	@ (80003d0 <adc_callback+0x38>)
 80003aa:	f083 0320 	eor.w	r3, r3, #32
 80003ae:	6153      	str	r3, [r2, #20]
	printf("Sensor value: %d\n\r",(int)sensor_value);
 80003b0:	4b06      	ldr	r3, [pc, #24]	@ (80003cc <adc_callback+0x34>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4619      	mov	r1, r3
 80003b6:	4807      	ldr	r0, [pc, #28]	@ (80003d4 <adc_callback+0x3c>)
 80003b8:	f000 fa72 	bl	80008a0 <iprintf>
	systickDelayMs(1000);
 80003bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003c0:	f000 f8c2 	bl	8000548 <systickDelayMs>
}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40012000 	.word	0x40012000
 80003cc:	20000078 	.word	0x20000078
 80003d0:	40020000 	.word	0x40020000
 80003d4:	08001594 	.word	0x08001594

080003d8 <ADC_IRQHandler>:

void ADC_IRQHandler(void){
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	//Check if RXNE is set
	if((ADC1->SR & SR_EOC) != 0)
 80003dc:	4b07      	ldr	r3, [pc, #28]	@ (80003fc <ADC_IRQHandler+0x24>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f003 0302 	and.w	r3, r3, #2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d007      	beq.n	80003f8 <ADC_IRQHandler+0x20>
	{
		//Clear EOC flag
		ADC1->SR &= ~(SR_EOC);
 80003e8:	4b04      	ldr	r3, [pc, #16]	@ (80003fc <ADC_IRQHandler+0x24>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a03      	ldr	r2, [pc, #12]	@ (80003fc <ADC_IRQHandler+0x24>)
 80003ee:	f023 0302 	bic.w	r3, r3, #2
 80003f2:	6013      	str	r3, [r2, #0]
		//DO something
		adc_callback();
 80003f4:	f7ff ffd0 	bl	8000398 <adc_callback>
	}
}
 80003f8:	bf00      	nop
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	40012000 	.word	0x40012000

08000400 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b086      	sub	sp, #24
 8000404:	af00      	add	r7, sp, #0
 8000406:	60f8      	str	r0, [r7, #12]
 8000408:	60b9      	str	r1, [r7, #8]
 800040a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800040c:	2300      	movs	r3, #0
 800040e:	617b      	str	r3, [r7, #20]
 8000410:	e00a      	b.n	8000428 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000412:	f3af 8000 	nop.w
 8000416:	4601      	mov	r1, r0
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	1c5a      	adds	r2, r3, #1
 800041c:	60ba      	str	r2, [r7, #8]
 800041e:	b2ca      	uxtb	r2, r1
 8000420:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	3301      	adds	r3, #1
 8000426:	617b      	str	r3, [r7, #20]
 8000428:	697a      	ldr	r2, [r7, #20]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	429a      	cmp	r2, r3
 800042e:	dbf0      	blt.n	8000412 <_read+0x12>
  }

  return len;
 8000430:	687b      	ldr	r3, [r7, #4]
}
 8000432:	4618      	mov	r0, r3
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800043a:	b580      	push	{r7, lr}
 800043c:	b086      	sub	sp, #24
 800043e:	af00      	add	r7, sp, #0
 8000440:	60f8      	str	r0, [r7, #12]
 8000442:	60b9      	str	r1, [r7, #8]
 8000444:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000446:	2300      	movs	r3, #0
 8000448:	617b      	str	r3, [r7, #20]
 800044a:	e009      	b.n	8000460 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800044c:	68bb      	ldr	r3, [r7, #8]
 800044e:	1c5a      	adds	r2, r3, #1
 8000450:	60ba      	str	r2, [r7, #8]
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	4618      	mov	r0, r3
 8000456:	f000 f8a1 	bl	800059c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800045a:	697b      	ldr	r3, [r7, #20]
 800045c:	3301      	adds	r3, #1
 800045e:	617b      	str	r3, [r7, #20]
 8000460:	697a      	ldr	r2, [r7, #20]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	429a      	cmp	r2, r3
 8000466:	dbf1      	blt.n	800044c <_write+0x12>
  }
  return len;
 8000468:	687b      	ldr	r3, [r7, #4]
}
 800046a:	4618      	mov	r0, r3
 800046c:	3718      	adds	r7, #24
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}

08000472 <_close>:

int _close(int file)
{
 8000472:	b480      	push	{r7}
 8000474:	b083      	sub	sp, #12
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800047a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800047e:	4618      	mov	r0, r3
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr

0800048a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800048a:	b480      	push	{r7}
 800048c:	b083      	sub	sp, #12
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
 8000492:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800049a:	605a      	str	r2, [r3, #4]
  return 0;
 800049c:	2300      	movs	r3, #0
}
 800049e:	4618      	mov	r0, r3
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr

080004aa <_isatty>:

int _isatty(int file)
{
 80004aa:	b480      	push	{r7}
 80004ac:	b083      	sub	sp, #12
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004b2:	2301      	movs	r3, #1
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr

080004c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004cc:	2300      	movs	r3, #0
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
	...

080004dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004e4:	4a14      	ldr	r2, [pc, #80]	@ (8000538 <_sbrk+0x5c>)
 80004e6:	4b15      	ldr	r3, [pc, #84]	@ (800053c <_sbrk+0x60>)
 80004e8:	1ad3      	subs	r3, r2, r3
 80004ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004f0:	4b13      	ldr	r3, [pc, #76]	@ (8000540 <_sbrk+0x64>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d102      	bne.n	80004fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004f8:	4b11      	ldr	r3, [pc, #68]	@ (8000540 <_sbrk+0x64>)
 80004fa:	4a12      	ldr	r2, [pc, #72]	@ (8000544 <_sbrk+0x68>)
 80004fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004fe:	4b10      	ldr	r3, [pc, #64]	@ (8000540 <_sbrk+0x64>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4413      	add	r3, r2
 8000506:	693a      	ldr	r2, [r7, #16]
 8000508:	429a      	cmp	r2, r3
 800050a:	d207      	bcs.n	800051c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800050c:	f000 fa6c 	bl	80009e8 <__errno>
 8000510:	4603      	mov	r3, r0
 8000512:	220c      	movs	r2, #12
 8000514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000516:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800051a:	e009      	b.n	8000530 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800051c:	4b08      	ldr	r3, [pc, #32]	@ (8000540 <_sbrk+0x64>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000522:	4b07      	ldr	r3, [pc, #28]	@ (8000540 <_sbrk+0x64>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4413      	add	r3, r2
 800052a:	4a05      	ldr	r2, [pc, #20]	@ (8000540 <_sbrk+0x64>)
 800052c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800052e:	68fb      	ldr	r3, [r7, #12]
}
 8000530:	4618      	mov	r0, r3
 8000532:	3718      	adds	r7, #24
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20020000 	.word	0x20020000
 800053c:	00000400 	.word	0x00000400
 8000540:	2000007c 	.word	0x2000007c
 8000544:	200001d0 	.word	0x200001d0

08000548 <systickDelayMs>:
#define SYSTICK_CTRL_ENABLE		(1U<<0)
#define SYSTICK_CTRL_CLKSRC		(1U<<2)
#define SYSTICK_CTRL_COUNTFLAG	(1U<<16)

void systickDelayMs(int delay)
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	//Configure SysTick
	//Reload with number of clocks per millisecond
	SysTick->LOAD	= SYSTICK_LOAD_VALUE;
 8000550:	4b11      	ldr	r3, [pc, #68]	@ (8000598 <systickDelayMs+0x50>)
 8000552:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000556:	605a      	str	r2, [r3, #4]
	//Clear SysTick current value register
	SysTick->VAL = 0;
 8000558:	4b0f      	ldr	r3, [pc, #60]	@ (8000598 <systickDelayMs+0x50>)
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
	//Enable SysTick and select internal clock source
	SysTick->CTRL = SYSTICK_CTRL_ENABLE | SYSTICK_CTRL_CLKSRC;
 800055e:	4b0e      	ldr	r3, [pc, #56]	@ (8000598 <systickDelayMs+0x50>)
 8000560:	2205      	movs	r2, #5
 8000562:	601a      	str	r2, [r3, #0]

	for(int i = 0; i<delay; i++)
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e009      	b.n	800057e <systickDelayMs+0x36>
	{
		//Wait until the count flag is set
		while((SysTick->CTRL & SYSTICK_CTRL_COUNTFLAG) == 0){}
 800056a:	bf00      	nop
 800056c:	4b0a      	ldr	r3, [pc, #40]	@ (8000598 <systickDelayMs+0x50>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000574:	2b00      	cmp	r3, #0
 8000576:	d0f9      	beq.n	800056c <systickDelayMs+0x24>
	for(int i = 0; i<delay; i++)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	3301      	adds	r3, #1
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	68fa      	ldr	r2, [r7, #12]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	429a      	cmp	r2, r3
 8000584:	dbf1      	blt.n	800056a <systickDelayMs+0x22>
	}
	SysTick->CTRL = 0;
 8000586:	4b04      	ldr	r3, [pc, #16]	@ (8000598 <systickDelayMs+0x50>)
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	e000e010 	.word	0xe000e010

0800059c <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

void uart_write(int ch);

int __io_putchar(int ch)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f000 f851 	bl	800064c <uart_write>
	return ch;
 80005aa:	687b      	ldr	r3, [r7, #4]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <uart2_tx_init>:
	//enable UART module
	USART2->CR1 |= CR1_UE;
}

void uart2_tx_init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	//*************Configure UART GPIO pin************
	//enable CLOCK access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80005b8:	4b20      	ldr	r3, [pc, #128]	@ (800063c <uart2_tx_init+0x88>)
 80005ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005bc:	4a1f      	ldr	r2, [pc, #124]	@ (800063c <uart2_tx_init+0x88>)
 80005be:	f043 0301 	orr.w	r3, r3, #1
 80005c2:	6313      	str	r3, [r2, #48]	@ 0x30
	//set PA2 mode to alternative function mode
	GPIOA->MODER &=~(1U<<4);
 80005c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000640 <uart2_tx_init+0x8c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000640 <uart2_tx_init+0x8c>)
 80005ca:	f023 0310 	bic.w	r3, r3, #16
 80005ce:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=	(1U<<5);
 80005d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000640 <uart2_tx_init+0x8c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a1a      	ldr	r2, [pc, #104]	@ (8000640 <uart2_tx_init+0x8c>)
 80005d6:	f043 0320 	orr.w	r3, r3, #32
 80005da:	6013      	str	r3, [r2, #0]
	//set PA2 alternate function type to UART_TX (AF07)
	GPIOA->AFR[0] |= (1U<<8);
 80005dc:	4b18      	ldr	r3, [pc, #96]	@ (8000640 <uart2_tx_init+0x8c>)
 80005de:	6a1b      	ldr	r3, [r3, #32]
 80005e0:	4a17      	ldr	r2, [pc, #92]	@ (8000640 <uart2_tx_init+0x8c>)
 80005e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005e6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80005e8:	4b15      	ldr	r3, [pc, #84]	@ (8000640 <uart2_tx_init+0x8c>)
 80005ea:	6a1b      	ldr	r3, [r3, #32]
 80005ec:	4a14      	ldr	r2, [pc, #80]	@ (8000640 <uart2_tx_init+0x8c>)
 80005ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005f2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80005f4:	4b12      	ldr	r3, [pc, #72]	@ (8000640 <uart2_tx_init+0x8c>)
 80005f6:	6a1b      	ldr	r3, [r3, #32]
 80005f8:	4a11      	ldr	r2, [pc, #68]	@ (8000640 <uart2_tx_init+0x8c>)
 80005fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005fe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000600:	4b0f      	ldr	r3, [pc, #60]	@ (8000640 <uart2_tx_init+0x8c>)
 8000602:	6a1b      	ldr	r3, [r3, #32]
 8000604:	4a0e      	ldr	r2, [pc, #56]	@ (8000640 <uart2_tx_init+0x8c>)
 8000606:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800060a:	6213      	str	r3, [r2, #32]
	//*************Configure UART module****************
	//enable clock access to uart2
	RCC->APB1ENR |= UART2EN;
 800060c:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <uart2_tx_init+0x88>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000610:	4a0a      	ldr	r2, [pc, #40]	@ (800063c <uart2_tx_init+0x88>)
 8000612:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000616:	6413      	str	r3, [r2, #64]	@ 0x40
	//configure baudrate
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 8000618:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800061c:	4909      	ldr	r1, [pc, #36]	@ (8000644 <uart2_tx_init+0x90>)
 800061e:	480a      	ldr	r0, [pc, #40]	@ (8000648 <uart2_tx_init+0x94>)
 8000620:	f000 f82c 	bl	800067c <uart_set_baudrate>
	//configure the transfer direction
	USART2->CR1 = CR1_TE;
 8000624:	4b08      	ldr	r3, [pc, #32]	@ (8000648 <uart2_tx_init+0x94>)
 8000626:	2208      	movs	r2, #8
 8000628:	60da      	str	r2, [r3, #12]
	//enable UART module
	USART2->CR1 |= CR1_UE;
 800062a:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <uart2_tx_init+0x94>)
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	4a06      	ldr	r2, [pc, #24]	@ (8000648 <uart2_tx_init+0x94>)
 8000630:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000634:	60d3      	str	r3, [r2, #12]
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40020000 	.word	0x40020000
 8000644:	00f42400 	.word	0x00f42400
 8000648:	40004400 	.word	0x40004400

0800064c <uart_write>:
	//Read data
	return USART2->DR;
}

void uart_write(int ch)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	//Make sure the transmit data register is empty
	while(!(USART2->SR & SR_TXE)){}
 8000654:	bf00      	nop
 8000656:	4b08      	ldr	r3, [pc, #32]	@ (8000678 <uart_write+0x2c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800065e:	2b00      	cmp	r3, #0
 8000660:	d0f9      	beq.n	8000656 <uart_write+0xa>
	//Write to transmit data register
	USART2->DR = (ch & 0xFF);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a04      	ldr	r2, [pc, #16]	@ (8000678 <uart_write+0x2c>)
 8000666:	b2db      	uxtb	r3, r3
 8000668:	6053      	str	r3, [r2, #4]
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40004400 	.word	0x40004400

0800067c <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000688:	6879      	ldr	r1, [r7, #4]
 800068a:	68b8      	ldr	r0, [r7, #8]
 800068c:	f000 f808 	bl	80006a0 <compute_uart_bd>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	609a      	str	r2, [r3, #8]
}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
	return	((PeriphClk + (BaudRate/2U))/BaudRate);
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	085a      	lsrs	r2, r3, #1
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	441a      	add	r2, r3
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b8:	b29b      	uxth	r3, r3
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
	...

080006c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006c8:	480d      	ldr	r0, [pc, #52]	@ (8000700 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d0:	480c      	ldr	r0, [pc, #48]	@ (8000704 <LoopForever+0x6>)
  ldr r1, =_edata
 80006d2:	490d      	ldr	r1, [pc, #52]	@ (8000708 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d4:	4a0d      	ldr	r2, [pc, #52]	@ (800070c <LoopForever+0xe>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d8:	e002      	b.n	80006e0 <LoopCopyDataInit>

080006da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006de:	3304      	adds	r3, #4

080006e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e4:	d3f9      	bcc.n	80006da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000710 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000714 <LoopForever+0x16>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ec:	e001      	b.n	80006f2 <LoopFillZerobss>

080006ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f0:	3204      	adds	r2, #4

080006f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f4:	d3fb      	bcc.n	80006ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006f6:	f000 f97d 	bl	80009f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fa:	f7ff fe2d 	bl	8000358 <main>

080006fe <LoopForever>:

LoopForever:
  b LoopForever
 80006fe:	e7fe      	b.n	80006fe <LoopForever>
  ldr   r0, =_estack
 8000700:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000708:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800070c:	080015ec 	.word	0x080015ec
  ldr r2, =_sbss
 8000710:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000714:	200001cc 	.word	0x200001cc

08000718 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <BusFault_Handler>
	...

0800071c <std>:
 800071c:	2300      	movs	r3, #0
 800071e:	b510      	push	{r4, lr}
 8000720:	4604      	mov	r4, r0
 8000722:	e9c0 3300 	strd	r3, r3, [r0]
 8000726:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800072a:	6083      	str	r3, [r0, #8]
 800072c:	8181      	strh	r1, [r0, #12]
 800072e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000730:	81c2      	strh	r2, [r0, #14]
 8000732:	6183      	str	r3, [r0, #24]
 8000734:	4619      	mov	r1, r3
 8000736:	2208      	movs	r2, #8
 8000738:	305c      	adds	r0, #92	@ 0x5c
 800073a:	f000 f906 	bl	800094a <memset>
 800073e:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <std+0x58>)
 8000740:	6263      	str	r3, [r4, #36]	@ 0x24
 8000742:	4b0d      	ldr	r3, [pc, #52]	@ (8000778 <std+0x5c>)
 8000744:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000746:	4b0d      	ldr	r3, [pc, #52]	@ (800077c <std+0x60>)
 8000748:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800074a:	4b0d      	ldr	r3, [pc, #52]	@ (8000780 <std+0x64>)
 800074c:	6323      	str	r3, [r4, #48]	@ 0x30
 800074e:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <std+0x68>)
 8000750:	6224      	str	r4, [r4, #32]
 8000752:	429c      	cmp	r4, r3
 8000754:	d006      	beq.n	8000764 <std+0x48>
 8000756:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800075a:	4294      	cmp	r4, r2
 800075c:	d002      	beq.n	8000764 <std+0x48>
 800075e:	33d0      	adds	r3, #208	@ 0xd0
 8000760:	429c      	cmp	r4, r3
 8000762:	d105      	bne.n	8000770 <std+0x54>
 8000764:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800076c:	f000 b966 	b.w	8000a3c <__retarget_lock_init_recursive>
 8000770:	bd10      	pop	{r4, pc}
 8000772:	bf00      	nop
 8000774:	080008c5 	.word	0x080008c5
 8000778:	080008e7 	.word	0x080008e7
 800077c:	0800091f 	.word	0x0800091f
 8000780:	08000943 	.word	0x08000943
 8000784:	20000080 	.word	0x20000080

08000788 <stdio_exit_handler>:
 8000788:	4a02      	ldr	r2, [pc, #8]	@ (8000794 <stdio_exit_handler+0xc>)
 800078a:	4903      	ldr	r1, [pc, #12]	@ (8000798 <stdio_exit_handler+0x10>)
 800078c:	4803      	ldr	r0, [pc, #12]	@ (800079c <stdio_exit_handler+0x14>)
 800078e:	f000 b869 	b.w	8000864 <_fwalk_sglue>
 8000792:	bf00      	nop
 8000794:	20000000 	.word	0x20000000
 8000798:	080012dd 	.word	0x080012dd
 800079c:	20000010 	.word	0x20000010

080007a0 <cleanup_stdio>:
 80007a0:	6841      	ldr	r1, [r0, #4]
 80007a2:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <cleanup_stdio+0x34>)
 80007a4:	4299      	cmp	r1, r3
 80007a6:	b510      	push	{r4, lr}
 80007a8:	4604      	mov	r4, r0
 80007aa:	d001      	beq.n	80007b0 <cleanup_stdio+0x10>
 80007ac:	f000 fd96 	bl	80012dc <_fflush_r>
 80007b0:	68a1      	ldr	r1, [r4, #8]
 80007b2:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <cleanup_stdio+0x38>)
 80007b4:	4299      	cmp	r1, r3
 80007b6:	d002      	beq.n	80007be <cleanup_stdio+0x1e>
 80007b8:	4620      	mov	r0, r4
 80007ba:	f000 fd8f 	bl	80012dc <_fflush_r>
 80007be:	68e1      	ldr	r1, [r4, #12]
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <cleanup_stdio+0x3c>)
 80007c2:	4299      	cmp	r1, r3
 80007c4:	d004      	beq.n	80007d0 <cleanup_stdio+0x30>
 80007c6:	4620      	mov	r0, r4
 80007c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007cc:	f000 bd86 	b.w	80012dc <_fflush_r>
 80007d0:	bd10      	pop	{r4, pc}
 80007d2:	bf00      	nop
 80007d4:	20000080 	.word	0x20000080
 80007d8:	200000e8 	.word	0x200000e8
 80007dc:	20000150 	.word	0x20000150

080007e0 <global_stdio_init.part.0>:
 80007e0:	b510      	push	{r4, lr}
 80007e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <global_stdio_init.part.0+0x30>)
 80007e4:	4c0b      	ldr	r4, [pc, #44]	@ (8000814 <global_stdio_init.part.0+0x34>)
 80007e6:	4a0c      	ldr	r2, [pc, #48]	@ (8000818 <global_stdio_init.part.0+0x38>)
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	4620      	mov	r0, r4
 80007ec:	2200      	movs	r2, #0
 80007ee:	2104      	movs	r1, #4
 80007f0:	f7ff ff94 	bl	800071c <std>
 80007f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80007f8:	2201      	movs	r2, #1
 80007fa:	2109      	movs	r1, #9
 80007fc:	f7ff ff8e 	bl	800071c <std>
 8000800:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000804:	2202      	movs	r2, #2
 8000806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800080a:	2112      	movs	r1, #18
 800080c:	f7ff bf86 	b.w	800071c <std>
 8000810:	200001b8 	.word	0x200001b8
 8000814:	20000080 	.word	0x20000080
 8000818:	08000789 	.word	0x08000789

0800081c <__sfp_lock_acquire>:
 800081c:	4801      	ldr	r0, [pc, #4]	@ (8000824 <__sfp_lock_acquire+0x8>)
 800081e:	f000 b90e 	b.w	8000a3e <__retarget_lock_acquire_recursive>
 8000822:	bf00      	nop
 8000824:	200001c1 	.word	0x200001c1

08000828 <__sfp_lock_release>:
 8000828:	4801      	ldr	r0, [pc, #4]	@ (8000830 <__sfp_lock_release+0x8>)
 800082a:	f000 b909 	b.w	8000a40 <__retarget_lock_release_recursive>
 800082e:	bf00      	nop
 8000830:	200001c1 	.word	0x200001c1

08000834 <__sinit>:
 8000834:	b510      	push	{r4, lr}
 8000836:	4604      	mov	r4, r0
 8000838:	f7ff fff0 	bl	800081c <__sfp_lock_acquire>
 800083c:	6a23      	ldr	r3, [r4, #32]
 800083e:	b11b      	cbz	r3, 8000848 <__sinit+0x14>
 8000840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000844:	f7ff bff0 	b.w	8000828 <__sfp_lock_release>
 8000848:	4b04      	ldr	r3, [pc, #16]	@ (800085c <__sinit+0x28>)
 800084a:	6223      	str	r3, [r4, #32]
 800084c:	4b04      	ldr	r3, [pc, #16]	@ (8000860 <__sinit+0x2c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d1f5      	bne.n	8000840 <__sinit+0xc>
 8000854:	f7ff ffc4 	bl	80007e0 <global_stdio_init.part.0>
 8000858:	e7f2      	b.n	8000840 <__sinit+0xc>
 800085a:	bf00      	nop
 800085c:	080007a1 	.word	0x080007a1
 8000860:	200001b8 	.word	0x200001b8

08000864 <_fwalk_sglue>:
 8000864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000868:	4607      	mov	r7, r0
 800086a:	4688      	mov	r8, r1
 800086c:	4614      	mov	r4, r2
 800086e:	2600      	movs	r6, #0
 8000870:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000874:	f1b9 0901 	subs.w	r9, r9, #1
 8000878:	d505      	bpl.n	8000886 <_fwalk_sglue+0x22>
 800087a:	6824      	ldr	r4, [r4, #0]
 800087c:	2c00      	cmp	r4, #0
 800087e:	d1f7      	bne.n	8000870 <_fwalk_sglue+0xc>
 8000880:	4630      	mov	r0, r6
 8000882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000886:	89ab      	ldrh	r3, [r5, #12]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d907      	bls.n	800089c <_fwalk_sglue+0x38>
 800088c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000890:	3301      	adds	r3, #1
 8000892:	d003      	beq.n	800089c <_fwalk_sglue+0x38>
 8000894:	4629      	mov	r1, r5
 8000896:	4638      	mov	r0, r7
 8000898:	47c0      	blx	r8
 800089a:	4306      	orrs	r6, r0
 800089c:	3568      	adds	r5, #104	@ 0x68
 800089e:	e7e9      	b.n	8000874 <_fwalk_sglue+0x10>

080008a0 <iprintf>:
 80008a0:	b40f      	push	{r0, r1, r2, r3}
 80008a2:	b507      	push	{r0, r1, r2, lr}
 80008a4:	4906      	ldr	r1, [pc, #24]	@ (80008c0 <iprintf+0x20>)
 80008a6:	ab04      	add	r3, sp, #16
 80008a8:	6808      	ldr	r0, [r1, #0]
 80008aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80008ae:	6881      	ldr	r1, [r0, #8]
 80008b0:	9301      	str	r3, [sp, #4]
 80008b2:	f000 f9e9 	bl	8000c88 <_vfiprintf_r>
 80008b6:	b003      	add	sp, #12
 80008b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80008bc:	b004      	add	sp, #16
 80008be:	4770      	bx	lr
 80008c0:	2000000c 	.word	0x2000000c

080008c4 <__sread>:
 80008c4:	b510      	push	{r4, lr}
 80008c6:	460c      	mov	r4, r1
 80008c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008cc:	f000 f868 	bl	80009a0 <_read_r>
 80008d0:	2800      	cmp	r0, #0
 80008d2:	bfab      	itete	ge
 80008d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80008d6:	89a3      	ldrhlt	r3, [r4, #12]
 80008d8:	181b      	addge	r3, r3, r0
 80008da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80008de:	bfac      	ite	ge
 80008e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80008e2:	81a3      	strhlt	r3, [r4, #12]
 80008e4:	bd10      	pop	{r4, pc}

080008e6 <__swrite>:
 80008e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008ea:	461f      	mov	r7, r3
 80008ec:	898b      	ldrh	r3, [r1, #12]
 80008ee:	05db      	lsls	r3, r3, #23
 80008f0:	4605      	mov	r5, r0
 80008f2:	460c      	mov	r4, r1
 80008f4:	4616      	mov	r6, r2
 80008f6:	d505      	bpl.n	8000904 <__swrite+0x1e>
 80008f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008fc:	2302      	movs	r3, #2
 80008fe:	2200      	movs	r2, #0
 8000900:	f000 f83c 	bl	800097c <_lseek_r>
 8000904:	89a3      	ldrh	r3, [r4, #12]
 8000906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800090a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800090e:	81a3      	strh	r3, [r4, #12]
 8000910:	4632      	mov	r2, r6
 8000912:	463b      	mov	r3, r7
 8000914:	4628      	mov	r0, r5
 8000916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800091a:	f000 b853 	b.w	80009c4 <_write_r>

0800091e <__sseek>:
 800091e:	b510      	push	{r4, lr}
 8000920:	460c      	mov	r4, r1
 8000922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000926:	f000 f829 	bl	800097c <_lseek_r>
 800092a:	1c43      	adds	r3, r0, #1
 800092c:	89a3      	ldrh	r3, [r4, #12]
 800092e:	bf15      	itete	ne
 8000930:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000932:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000936:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800093a:	81a3      	strheq	r3, [r4, #12]
 800093c:	bf18      	it	ne
 800093e:	81a3      	strhne	r3, [r4, #12]
 8000940:	bd10      	pop	{r4, pc}

08000942 <__sclose>:
 8000942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000946:	f000 b809 	b.w	800095c <_close_r>

0800094a <memset>:
 800094a:	4402      	add	r2, r0
 800094c:	4603      	mov	r3, r0
 800094e:	4293      	cmp	r3, r2
 8000950:	d100      	bne.n	8000954 <memset+0xa>
 8000952:	4770      	bx	lr
 8000954:	f803 1b01 	strb.w	r1, [r3], #1
 8000958:	e7f9      	b.n	800094e <memset+0x4>
	...

0800095c <_close_r>:
 800095c:	b538      	push	{r3, r4, r5, lr}
 800095e:	4d06      	ldr	r5, [pc, #24]	@ (8000978 <_close_r+0x1c>)
 8000960:	2300      	movs	r3, #0
 8000962:	4604      	mov	r4, r0
 8000964:	4608      	mov	r0, r1
 8000966:	602b      	str	r3, [r5, #0]
 8000968:	f7ff fd83 	bl	8000472 <_close>
 800096c:	1c43      	adds	r3, r0, #1
 800096e:	d102      	bne.n	8000976 <_close_r+0x1a>
 8000970:	682b      	ldr	r3, [r5, #0]
 8000972:	b103      	cbz	r3, 8000976 <_close_r+0x1a>
 8000974:	6023      	str	r3, [r4, #0]
 8000976:	bd38      	pop	{r3, r4, r5, pc}
 8000978:	200001bc 	.word	0x200001bc

0800097c <_lseek_r>:
 800097c:	b538      	push	{r3, r4, r5, lr}
 800097e:	4d07      	ldr	r5, [pc, #28]	@ (800099c <_lseek_r+0x20>)
 8000980:	4604      	mov	r4, r0
 8000982:	4608      	mov	r0, r1
 8000984:	4611      	mov	r1, r2
 8000986:	2200      	movs	r2, #0
 8000988:	602a      	str	r2, [r5, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	f7ff fd98 	bl	80004c0 <_lseek>
 8000990:	1c43      	adds	r3, r0, #1
 8000992:	d102      	bne.n	800099a <_lseek_r+0x1e>
 8000994:	682b      	ldr	r3, [r5, #0]
 8000996:	b103      	cbz	r3, 800099a <_lseek_r+0x1e>
 8000998:	6023      	str	r3, [r4, #0]
 800099a:	bd38      	pop	{r3, r4, r5, pc}
 800099c:	200001bc 	.word	0x200001bc

080009a0 <_read_r>:
 80009a0:	b538      	push	{r3, r4, r5, lr}
 80009a2:	4d07      	ldr	r5, [pc, #28]	@ (80009c0 <_read_r+0x20>)
 80009a4:	4604      	mov	r4, r0
 80009a6:	4608      	mov	r0, r1
 80009a8:	4611      	mov	r1, r2
 80009aa:	2200      	movs	r2, #0
 80009ac:	602a      	str	r2, [r5, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	f7ff fd26 	bl	8000400 <_read>
 80009b4:	1c43      	adds	r3, r0, #1
 80009b6:	d102      	bne.n	80009be <_read_r+0x1e>
 80009b8:	682b      	ldr	r3, [r5, #0]
 80009ba:	b103      	cbz	r3, 80009be <_read_r+0x1e>
 80009bc:	6023      	str	r3, [r4, #0]
 80009be:	bd38      	pop	{r3, r4, r5, pc}
 80009c0:	200001bc 	.word	0x200001bc

080009c4 <_write_r>:
 80009c4:	b538      	push	{r3, r4, r5, lr}
 80009c6:	4d07      	ldr	r5, [pc, #28]	@ (80009e4 <_write_r+0x20>)
 80009c8:	4604      	mov	r4, r0
 80009ca:	4608      	mov	r0, r1
 80009cc:	4611      	mov	r1, r2
 80009ce:	2200      	movs	r2, #0
 80009d0:	602a      	str	r2, [r5, #0]
 80009d2:	461a      	mov	r2, r3
 80009d4:	f7ff fd31 	bl	800043a <_write>
 80009d8:	1c43      	adds	r3, r0, #1
 80009da:	d102      	bne.n	80009e2 <_write_r+0x1e>
 80009dc:	682b      	ldr	r3, [r5, #0]
 80009de:	b103      	cbz	r3, 80009e2 <_write_r+0x1e>
 80009e0:	6023      	str	r3, [r4, #0]
 80009e2:	bd38      	pop	{r3, r4, r5, pc}
 80009e4:	200001bc 	.word	0x200001bc

080009e8 <__errno>:
 80009e8:	4b01      	ldr	r3, [pc, #4]	@ (80009f0 <__errno+0x8>)
 80009ea:	6818      	ldr	r0, [r3, #0]
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	2000000c 	.word	0x2000000c

080009f4 <__libc_init_array>:
 80009f4:	b570      	push	{r4, r5, r6, lr}
 80009f6:	4d0d      	ldr	r5, [pc, #52]	@ (8000a2c <__libc_init_array+0x38>)
 80009f8:	4c0d      	ldr	r4, [pc, #52]	@ (8000a30 <__libc_init_array+0x3c>)
 80009fa:	1b64      	subs	r4, r4, r5
 80009fc:	10a4      	asrs	r4, r4, #2
 80009fe:	2600      	movs	r6, #0
 8000a00:	42a6      	cmp	r6, r4
 8000a02:	d109      	bne.n	8000a18 <__libc_init_array+0x24>
 8000a04:	4d0b      	ldr	r5, [pc, #44]	@ (8000a34 <__libc_init_array+0x40>)
 8000a06:	4c0c      	ldr	r4, [pc, #48]	@ (8000a38 <__libc_init_array+0x44>)
 8000a08:	f000 fdb8 	bl	800157c <_init>
 8000a0c:	1b64      	subs	r4, r4, r5
 8000a0e:	10a4      	asrs	r4, r4, #2
 8000a10:	2600      	movs	r6, #0
 8000a12:	42a6      	cmp	r6, r4
 8000a14:	d105      	bne.n	8000a22 <__libc_init_array+0x2e>
 8000a16:	bd70      	pop	{r4, r5, r6, pc}
 8000a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a1c:	4798      	blx	r3
 8000a1e:	3601      	adds	r6, #1
 8000a20:	e7ee      	b.n	8000a00 <__libc_init_array+0xc>
 8000a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a26:	4798      	blx	r3
 8000a28:	3601      	adds	r6, #1
 8000a2a:	e7f2      	b.n	8000a12 <__libc_init_array+0x1e>
 8000a2c:	080015e4 	.word	0x080015e4
 8000a30:	080015e4 	.word	0x080015e4
 8000a34:	080015e4 	.word	0x080015e4
 8000a38:	080015e8 	.word	0x080015e8

08000a3c <__retarget_lock_init_recursive>:
 8000a3c:	4770      	bx	lr

08000a3e <__retarget_lock_acquire_recursive>:
 8000a3e:	4770      	bx	lr

08000a40 <__retarget_lock_release_recursive>:
 8000a40:	4770      	bx	lr
	...

08000a44 <_free_r>:
 8000a44:	b538      	push	{r3, r4, r5, lr}
 8000a46:	4605      	mov	r5, r0
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	d041      	beq.n	8000ad0 <_free_r+0x8c>
 8000a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a50:	1f0c      	subs	r4, r1, #4
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	bfb8      	it	lt
 8000a56:	18e4      	addlt	r4, r4, r3
 8000a58:	f000 f8e0 	bl	8000c1c <__malloc_lock>
 8000a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ad4 <_free_r+0x90>)
 8000a5e:	6813      	ldr	r3, [r2, #0]
 8000a60:	b933      	cbnz	r3, 8000a70 <_free_r+0x2c>
 8000a62:	6063      	str	r3, [r4, #4]
 8000a64:	6014      	str	r4, [r2, #0]
 8000a66:	4628      	mov	r0, r5
 8000a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a6c:	f000 b8dc 	b.w	8000c28 <__malloc_unlock>
 8000a70:	42a3      	cmp	r3, r4
 8000a72:	d908      	bls.n	8000a86 <_free_r+0x42>
 8000a74:	6820      	ldr	r0, [r4, #0]
 8000a76:	1821      	adds	r1, r4, r0
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	bf01      	itttt	eq
 8000a7c:	6819      	ldreq	r1, [r3, #0]
 8000a7e:	685b      	ldreq	r3, [r3, #4]
 8000a80:	1809      	addeq	r1, r1, r0
 8000a82:	6021      	streq	r1, [r4, #0]
 8000a84:	e7ed      	b.n	8000a62 <_free_r+0x1e>
 8000a86:	461a      	mov	r2, r3
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	b10b      	cbz	r3, 8000a90 <_free_r+0x4c>
 8000a8c:	42a3      	cmp	r3, r4
 8000a8e:	d9fa      	bls.n	8000a86 <_free_r+0x42>
 8000a90:	6811      	ldr	r1, [r2, #0]
 8000a92:	1850      	adds	r0, r2, r1
 8000a94:	42a0      	cmp	r0, r4
 8000a96:	d10b      	bne.n	8000ab0 <_free_r+0x6c>
 8000a98:	6820      	ldr	r0, [r4, #0]
 8000a9a:	4401      	add	r1, r0
 8000a9c:	1850      	adds	r0, r2, r1
 8000a9e:	4283      	cmp	r3, r0
 8000aa0:	6011      	str	r1, [r2, #0]
 8000aa2:	d1e0      	bne.n	8000a66 <_free_r+0x22>
 8000aa4:	6818      	ldr	r0, [r3, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	6053      	str	r3, [r2, #4]
 8000aaa:	4408      	add	r0, r1
 8000aac:	6010      	str	r0, [r2, #0]
 8000aae:	e7da      	b.n	8000a66 <_free_r+0x22>
 8000ab0:	d902      	bls.n	8000ab8 <_free_r+0x74>
 8000ab2:	230c      	movs	r3, #12
 8000ab4:	602b      	str	r3, [r5, #0]
 8000ab6:	e7d6      	b.n	8000a66 <_free_r+0x22>
 8000ab8:	6820      	ldr	r0, [r4, #0]
 8000aba:	1821      	adds	r1, r4, r0
 8000abc:	428b      	cmp	r3, r1
 8000abe:	bf04      	itt	eq
 8000ac0:	6819      	ldreq	r1, [r3, #0]
 8000ac2:	685b      	ldreq	r3, [r3, #4]
 8000ac4:	6063      	str	r3, [r4, #4]
 8000ac6:	bf04      	itt	eq
 8000ac8:	1809      	addeq	r1, r1, r0
 8000aca:	6021      	streq	r1, [r4, #0]
 8000acc:	6054      	str	r4, [r2, #4]
 8000ace:	e7ca      	b.n	8000a66 <_free_r+0x22>
 8000ad0:	bd38      	pop	{r3, r4, r5, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200001c8 	.word	0x200001c8

08000ad8 <sbrk_aligned>:
 8000ad8:	b570      	push	{r4, r5, r6, lr}
 8000ada:	4e0f      	ldr	r6, [pc, #60]	@ (8000b18 <sbrk_aligned+0x40>)
 8000adc:	460c      	mov	r4, r1
 8000ade:	6831      	ldr	r1, [r6, #0]
 8000ae0:	4605      	mov	r5, r0
 8000ae2:	b911      	cbnz	r1, 8000aea <sbrk_aligned+0x12>
 8000ae4:	f000 fcb6 	bl	8001454 <_sbrk_r>
 8000ae8:	6030      	str	r0, [r6, #0]
 8000aea:	4621      	mov	r1, r4
 8000aec:	4628      	mov	r0, r5
 8000aee:	f000 fcb1 	bl	8001454 <_sbrk_r>
 8000af2:	1c43      	adds	r3, r0, #1
 8000af4:	d103      	bne.n	8000afe <sbrk_aligned+0x26>
 8000af6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000afa:	4620      	mov	r0, r4
 8000afc:	bd70      	pop	{r4, r5, r6, pc}
 8000afe:	1cc4      	adds	r4, r0, #3
 8000b00:	f024 0403 	bic.w	r4, r4, #3
 8000b04:	42a0      	cmp	r0, r4
 8000b06:	d0f8      	beq.n	8000afa <sbrk_aligned+0x22>
 8000b08:	1a21      	subs	r1, r4, r0
 8000b0a:	4628      	mov	r0, r5
 8000b0c:	f000 fca2 	bl	8001454 <_sbrk_r>
 8000b10:	3001      	adds	r0, #1
 8000b12:	d1f2      	bne.n	8000afa <sbrk_aligned+0x22>
 8000b14:	e7ef      	b.n	8000af6 <sbrk_aligned+0x1e>
 8000b16:	bf00      	nop
 8000b18:	200001c4 	.word	0x200001c4

08000b1c <_malloc_r>:
 8000b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b20:	1ccd      	adds	r5, r1, #3
 8000b22:	f025 0503 	bic.w	r5, r5, #3
 8000b26:	3508      	adds	r5, #8
 8000b28:	2d0c      	cmp	r5, #12
 8000b2a:	bf38      	it	cc
 8000b2c:	250c      	movcc	r5, #12
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	4606      	mov	r6, r0
 8000b32:	db01      	blt.n	8000b38 <_malloc_r+0x1c>
 8000b34:	42a9      	cmp	r1, r5
 8000b36:	d904      	bls.n	8000b42 <_malloc_r+0x26>
 8000b38:	230c      	movs	r3, #12
 8000b3a:	6033      	str	r3, [r6, #0]
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c18 <_malloc_r+0xfc>
 8000b46:	f000 f869 	bl	8000c1c <__malloc_lock>
 8000b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8000b4e:	461c      	mov	r4, r3
 8000b50:	bb44      	cbnz	r4, 8000ba4 <_malloc_r+0x88>
 8000b52:	4629      	mov	r1, r5
 8000b54:	4630      	mov	r0, r6
 8000b56:	f7ff ffbf 	bl	8000ad8 <sbrk_aligned>
 8000b5a:	1c43      	adds	r3, r0, #1
 8000b5c:	4604      	mov	r4, r0
 8000b5e:	d158      	bne.n	8000c12 <_malloc_r+0xf6>
 8000b60:	f8d8 4000 	ldr.w	r4, [r8]
 8000b64:	4627      	mov	r7, r4
 8000b66:	2f00      	cmp	r7, #0
 8000b68:	d143      	bne.n	8000bf2 <_malloc_r+0xd6>
 8000b6a:	2c00      	cmp	r4, #0
 8000b6c:	d04b      	beq.n	8000c06 <_malloc_r+0xea>
 8000b6e:	6823      	ldr	r3, [r4, #0]
 8000b70:	4639      	mov	r1, r7
 8000b72:	4630      	mov	r0, r6
 8000b74:	eb04 0903 	add.w	r9, r4, r3
 8000b78:	f000 fc6c 	bl	8001454 <_sbrk_r>
 8000b7c:	4581      	cmp	r9, r0
 8000b7e:	d142      	bne.n	8000c06 <_malloc_r+0xea>
 8000b80:	6821      	ldr	r1, [r4, #0]
 8000b82:	1a6d      	subs	r5, r5, r1
 8000b84:	4629      	mov	r1, r5
 8000b86:	4630      	mov	r0, r6
 8000b88:	f7ff ffa6 	bl	8000ad8 <sbrk_aligned>
 8000b8c:	3001      	adds	r0, #1
 8000b8e:	d03a      	beq.n	8000c06 <_malloc_r+0xea>
 8000b90:	6823      	ldr	r3, [r4, #0]
 8000b92:	442b      	add	r3, r5
 8000b94:	6023      	str	r3, [r4, #0]
 8000b96:	f8d8 3000 	ldr.w	r3, [r8]
 8000b9a:	685a      	ldr	r2, [r3, #4]
 8000b9c:	bb62      	cbnz	r2, 8000bf8 <_malloc_r+0xdc>
 8000b9e:	f8c8 7000 	str.w	r7, [r8]
 8000ba2:	e00f      	b.n	8000bc4 <_malloc_r+0xa8>
 8000ba4:	6822      	ldr	r2, [r4, #0]
 8000ba6:	1b52      	subs	r2, r2, r5
 8000ba8:	d420      	bmi.n	8000bec <_malloc_r+0xd0>
 8000baa:	2a0b      	cmp	r2, #11
 8000bac:	d917      	bls.n	8000bde <_malloc_r+0xc2>
 8000bae:	1961      	adds	r1, r4, r5
 8000bb0:	42a3      	cmp	r3, r4
 8000bb2:	6025      	str	r5, [r4, #0]
 8000bb4:	bf18      	it	ne
 8000bb6:	6059      	strne	r1, [r3, #4]
 8000bb8:	6863      	ldr	r3, [r4, #4]
 8000bba:	bf08      	it	eq
 8000bbc:	f8c8 1000 	streq.w	r1, [r8]
 8000bc0:	5162      	str	r2, [r4, r5]
 8000bc2:	604b      	str	r3, [r1, #4]
 8000bc4:	4630      	mov	r0, r6
 8000bc6:	f000 f82f 	bl	8000c28 <__malloc_unlock>
 8000bca:	f104 000b 	add.w	r0, r4, #11
 8000bce:	1d23      	adds	r3, r4, #4
 8000bd0:	f020 0007 	bic.w	r0, r0, #7
 8000bd4:	1ac2      	subs	r2, r0, r3
 8000bd6:	bf1c      	itt	ne
 8000bd8:	1a1b      	subne	r3, r3, r0
 8000bda:	50a3      	strne	r3, [r4, r2]
 8000bdc:	e7af      	b.n	8000b3e <_malloc_r+0x22>
 8000bde:	6862      	ldr	r2, [r4, #4]
 8000be0:	42a3      	cmp	r3, r4
 8000be2:	bf0c      	ite	eq
 8000be4:	f8c8 2000 	streq.w	r2, [r8]
 8000be8:	605a      	strne	r2, [r3, #4]
 8000bea:	e7eb      	b.n	8000bc4 <_malloc_r+0xa8>
 8000bec:	4623      	mov	r3, r4
 8000bee:	6864      	ldr	r4, [r4, #4]
 8000bf0:	e7ae      	b.n	8000b50 <_malloc_r+0x34>
 8000bf2:	463c      	mov	r4, r7
 8000bf4:	687f      	ldr	r7, [r7, #4]
 8000bf6:	e7b6      	b.n	8000b66 <_malloc_r+0x4a>
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	42a3      	cmp	r3, r4
 8000bfe:	d1fb      	bne.n	8000bf8 <_malloc_r+0xdc>
 8000c00:	2300      	movs	r3, #0
 8000c02:	6053      	str	r3, [r2, #4]
 8000c04:	e7de      	b.n	8000bc4 <_malloc_r+0xa8>
 8000c06:	230c      	movs	r3, #12
 8000c08:	6033      	str	r3, [r6, #0]
 8000c0a:	4630      	mov	r0, r6
 8000c0c:	f000 f80c 	bl	8000c28 <__malloc_unlock>
 8000c10:	e794      	b.n	8000b3c <_malloc_r+0x20>
 8000c12:	6005      	str	r5, [r0, #0]
 8000c14:	e7d6      	b.n	8000bc4 <_malloc_r+0xa8>
 8000c16:	bf00      	nop
 8000c18:	200001c8 	.word	0x200001c8

08000c1c <__malloc_lock>:
 8000c1c:	4801      	ldr	r0, [pc, #4]	@ (8000c24 <__malloc_lock+0x8>)
 8000c1e:	f7ff bf0e 	b.w	8000a3e <__retarget_lock_acquire_recursive>
 8000c22:	bf00      	nop
 8000c24:	200001c0 	.word	0x200001c0

08000c28 <__malloc_unlock>:
 8000c28:	4801      	ldr	r0, [pc, #4]	@ (8000c30 <__malloc_unlock+0x8>)
 8000c2a:	f7ff bf09 	b.w	8000a40 <__retarget_lock_release_recursive>
 8000c2e:	bf00      	nop
 8000c30:	200001c0 	.word	0x200001c0

08000c34 <__sfputc_r>:
 8000c34:	6893      	ldr	r3, [r2, #8]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	b410      	push	{r4}
 8000c3c:	6093      	str	r3, [r2, #8]
 8000c3e:	da08      	bge.n	8000c52 <__sfputc_r+0x1e>
 8000c40:	6994      	ldr	r4, [r2, #24]
 8000c42:	42a3      	cmp	r3, r4
 8000c44:	db01      	blt.n	8000c4a <__sfputc_r+0x16>
 8000c46:	290a      	cmp	r1, #10
 8000c48:	d103      	bne.n	8000c52 <__sfputc_r+0x1e>
 8000c4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c4e:	f000 bb6d 	b.w	800132c <__swbuf_r>
 8000c52:	6813      	ldr	r3, [r2, #0]
 8000c54:	1c58      	adds	r0, r3, #1
 8000c56:	6010      	str	r0, [r2, #0]
 8000c58:	7019      	strb	r1, [r3, #0]
 8000c5a:	4608      	mov	r0, r1
 8000c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <__sfputs_r>:
 8000c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c64:	4606      	mov	r6, r0
 8000c66:	460f      	mov	r7, r1
 8000c68:	4614      	mov	r4, r2
 8000c6a:	18d5      	adds	r5, r2, r3
 8000c6c:	42ac      	cmp	r4, r5
 8000c6e:	d101      	bne.n	8000c74 <__sfputs_r+0x12>
 8000c70:	2000      	movs	r0, #0
 8000c72:	e007      	b.n	8000c84 <__sfputs_r+0x22>
 8000c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c78:	463a      	mov	r2, r7
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	f7ff ffda 	bl	8000c34 <__sfputc_r>
 8000c80:	1c43      	adds	r3, r0, #1
 8000c82:	d1f3      	bne.n	8000c6c <__sfputs_r+0xa>
 8000c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c88 <_vfiprintf_r>:
 8000c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c8c:	460d      	mov	r5, r1
 8000c8e:	b09d      	sub	sp, #116	@ 0x74
 8000c90:	4614      	mov	r4, r2
 8000c92:	4698      	mov	r8, r3
 8000c94:	4606      	mov	r6, r0
 8000c96:	b118      	cbz	r0, 8000ca0 <_vfiprintf_r+0x18>
 8000c98:	6a03      	ldr	r3, [r0, #32]
 8000c9a:	b90b      	cbnz	r3, 8000ca0 <_vfiprintf_r+0x18>
 8000c9c:	f7ff fdca 	bl	8000834 <__sinit>
 8000ca0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000ca2:	07d9      	lsls	r1, r3, #31
 8000ca4:	d405      	bmi.n	8000cb2 <_vfiprintf_r+0x2a>
 8000ca6:	89ab      	ldrh	r3, [r5, #12]
 8000ca8:	059a      	lsls	r2, r3, #22
 8000caa:	d402      	bmi.n	8000cb2 <_vfiprintf_r+0x2a>
 8000cac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000cae:	f7ff fec6 	bl	8000a3e <__retarget_lock_acquire_recursive>
 8000cb2:	89ab      	ldrh	r3, [r5, #12]
 8000cb4:	071b      	lsls	r3, r3, #28
 8000cb6:	d501      	bpl.n	8000cbc <_vfiprintf_r+0x34>
 8000cb8:	692b      	ldr	r3, [r5, #16]
 8000cba:	b99b      	cbnz	r3, 8000ce4 <_vfiprintf_r+0x5c>
 8000cbc:	4629      	mov	r1, r5
 8000cbe:	4630      	mov	r0, r6
 8000cc0:	f000 fb72 	bl	80013a8 <__swsetup_r>
 8000cc4:	b170      	cbz	r0, 8000ce4 <_vfiprintf_r+0x5c>
 8000cc6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000cc8:	07dc      	lsls	r4, r3, #31
 8000cca:	d504      	bpl.n	8000cd6 <_vfiprintf_r+0x4e>
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cd0:	b01d      	add	sp, #116	@ 0x74
 8000cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cd6:	89ab      	ldrh	r3, [r5, #12]
 8000cd8:	0598      	lsls	r0, r3, #22
 8000cda:	d4f7      	bmi.n	8000ccc <_vfiprintf_r+0x44>
 8000cdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000cde:	f7ff feaf 	bl	8000a40 <__retarget_lock_release_recursive>
 8000ce2:	e7f3      	b.n	8000ccc <_vfiprintf_r+0x44>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ce8:	2320      	movs	r3, #32
 8000cea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000cee:	f8cd 800c 	str.w	r8, [sp, #12]
 8000cf2:	2330      	movs	r3, #48	@ 0x30
 8000cf4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000ea4 <_vfiprintf_r+0x21c>
 8000cf8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000cfc:	f04f 0901 	mov.w	r9, #1
 8000d00:	4623      	mov	r3, r4
 8000d02:	469a      	mov	sl, r3
 8000d04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d08:	b10a      	cbz	r2, 8000d0e <_vfiprintf_r+0x86>
 8000d0a:	2a25      	cmp	r2, #37	@ 0x25
 8000d0c:	d1f9      	bne.n	8000d02 <_vfiprintf_r+0x7a>
 8000d0e:	ebba 0b04 	subs.w	fp, sl, r4
 8000d12:	d00b      	beq.n	8000d2c <_vfiprintf_r+0xa4>
 8000d14:	465b      	mov	r3, fp
 8000d16:	4622      	mov	r2, r4
 8000d18:	4629      	mov	r1, r5
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	f7ff ffa1 	bl	8000c62 <__sfputs_r>
 8000d20:	3001      	adds	r0, #1
 8000d22:	f000 80a7 	beq.w	8000e74 <_vfiprintf_r+0x1ec>
 8000d26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000d28:	445a      	add	r2, fp
 8000d2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d2c:	f89a 3000 	ldrb.w	r3, [sl]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	f000 809f 	beq.w	8000e74 <_vfiprintf_r+0x1ec>
 8000d36:	2300      	movs	r3, #0
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d40:	f10a 0a01 	add.w	sl, sl, #1
 8000d44:	9304      	str	r3, [sp, #16]
 8000d46:	9307      	str	r3, [sp, #28]
 8000d48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000d4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8000d4e:	4654      	mov	r4, sl
 8000d50:	2205      	movs	r2, #5
 8000d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d56:	4853      	ldr	r0, [pc, #332]	@ (8000ea4 <_vfiprintf_r+0x21c>)
 8000d58:	f7ff fa42 	bl	80001e0 <memchr>
 8000d5c:	9a04      	ldr	r2, [sp, #16]
 8000d5e:	b9d8      	cbnz	r0, 8000d98 <_vfiprintf_r+0x110>
 8000d60:	06d1      	lsls	r1, r2, #27
 8000d62:	bf44      	itt	mi
 8000d64:	2320      	movmi	r3, #32
 8000d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d6a:	0713      	lsls	r3, r2, #28
 8000d6c:	bf44      	itt	mi
 8000d6e:	232b      	movmi	r3, #43	@ 0x2b
 8000d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d74:	f89a 3000 	ldrb.w	r3, [sl]
 8000d78:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d7a:	d015      	beq.n	8000da8 <_vfiprintf_r+0x120>
 8000d7c:	9a07      	ldr	r2, [sp, #28]
 8000d7e:	4654      	mov	r4, sl
 8000d80:	2000      	movs	r0, #0
 8000d82:	f04f 0c0a 	mov.w	ip, #10
 8000d86:	4621      	mov	r1, r4
 8000d88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d8c:	3b30      	subs	r3, #48	@ 0x30
 8000d8e:	2b09      	cmp	r3, #9
 8000d90:	d94b      	bls.n	8000e2a <_vfiprintf_r+0x1a2>
 8000d92:	b1b0      	cbz	r0, 8000dc2 <_vfiprintf_r+0x13a>
 8000d94:	9207      	str	r2, [sp, #28]
 8000d96:	e014      	b.n	8000dc2 <_vfiprintf_r+0x13a>
 8000d98:	eba0 0308 	sub.w	r3, r0, r8
 8000d9c:	fa09 f303 	lsl.w	r3, r9, r3
 8000da0:	4313      	orrs	r3, r2
 8000da2:	9304      	str	r3, [sp, #16]
 8000da4:	46a2      	mov	sl, r4
 8000da6:	e7d2      	b.n	8000d4e <_vfiprintf_r+0xc6>
 8000da8:	9b03      	ldr	r3, [sp, #12]
 8000daa:	1d19      	adds	r1, r3, #4
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	9103      	str	r1, [sp, #12]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	bfbb      	ittet	lt
 8000db4:	425b      	neglt	r3, r3
 8000db6:	f042 0202 	orrlt.w	r2, r2, #2
 8000dba:	9307      	strge	r3, [sp, #28]
 8000dbc:	9307      	strlt	r3, [sp, #28]
 8000dbe:	bfb8      	it	lt
 8000dc0:	9204      	strlt	r2, [sp, #16]
 8000dc2:	7823      	ldrb	r3, [r4, #0]
 8000dc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8000dc6:	d10a      	bne.n	8000dde <_vfiprintf_r+0x156>
 8000dc8:	7863      	ldrb	r3, [r4, #1]
 8000dca:	2b2a      	cmp	r3, #42	@ 0x2a
 8000dcc:	d132      	bne.n	8000e34 <_vfiprintf_r+0x1ac>
 8000dce:	9b03      	ldr	r3, [sp, #12]
 8000dd0:	1d1a      	adds	r2, r3, #4
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	9203      	str	r2, [sp, #12]
 8000dd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000dda:	3402      	adds	r4, #2
 8000ddc:	9305      	str	r3, [sp, #20]
 8000dde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000eb4 <_vfiprintf_r+0x22c>
 8000de2:	7821      	ldrb	r1, [r4, #0]
 8000de4:	2203      	movs	r2, #3
 8000de6:	4650      	mov	r0, sl
 8000de8:	f7ff f9fa 	bl	80001e0 <memchr>
 8000dec:	b138      	cbz	r0, 8000dfe <_vfiprintf_r+0x176>
 8000dee:	9b04      	ldr	r3, [sp, #16]
 8000df0:	eba0 000a 	sub.w	r0, r0, sl
 8000df4:	2240      	movs	r2, #64	@ 0x40
 8000df6:	4082      	lsls	r2, r0
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	3401      	adds	r4, #1
 8000dfc:	9304      	str	r3, [sp, #16]
 8000dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e02:	4829      	ldr	r0, [pc, #164]	@ (8000ea8 <_vfiprintf_r+0x220>)
 8000e04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000e08:	2206      	movs	r2, #6
 8000e0a:	f7ff f9e9 	bl	80001e0 <memchr>
 8000e0e:	2800      	cmp	r0, #0
 8000e10:	d03f      	beq.n	8000e92 <_vfiprintf_r+0x20a>
 8000e12:	4b26      	ldr	r3, [pc, #152]	@ (8000eac <_vfiprintf_r+0x224>)
 8000e14:	bb1b      	cbnz	r3, 8000e5e <_vfiprintf_r+0x1d6>
 8000e16:	9b03      	ldr	r3, [sp, #12]
 8000e18:	3307      	adds	r3, #7
 8000e1a:	f023 0307 	bic.w	r3, r3, #7
 8000e1e:	3308      	adds	r3, #8
 8000e20:	9303      	str	r3, [sp, #12]
 8000e22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000e24:	443b      	add	r3, r7
 8000e26:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e28:	e76a      	b.n	8000d00 <_vfiprintf_r+0x78>
 8000e2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e2e:	460c      	mov	r4, r1
 8000e30:	2001      	movs	r0, #1
 8000e32:	e7a8      	b.n	8000d86 <_vfiprintf_r+0xfe>
 8000e34:	2300      	movs	r3, #0
 8000e36:	3401      	adds	r4, #1
 8000e38:	9305      	str	r3, [sp, #20]
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f04f 0c0a 	mov.w	ip, #10
 8000e40:	4620      	mov	r0, r4
 8000e42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e46:	3a30      	subs	r2, #48	@ 0x30
 8000e48:	2a09      	cmp	r2, #9
 8000e4a:	d903      	bls.n	8000e54 <_vfiprintf_r+0x1cc>
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0c6      	beq.n	8000dde <_vfiprintf_r+0x156>
 8000e50:	9105      	str	r1, [sp, #20]
 8000e52:	e7c4      	b.n	8000dde <_vfiprintf_r+0x156>
 8000e54:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e58:	4604      	mov	r4, r0
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e7f0      	b.n	8000e40 <_vfiprintf_r+0x1b8>
 8000e5e:	ab03      	add	r3, sp, #12
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	462a      	mov	r2, r5
 8000e64:	4b12      	ldr	r3, [pc, #72]	@ (8000eb0 <_vfiprintf_r+0x228>)
 8000e66:	a904      	add	r1, sp, #16
 8000e68:	4630      	mov	r0, r6
 8000e6a:	f3af 8000 	nop.w
 8000e6e:	4607      	mov	r7, r0
 8000e70:	1c78      	adds	r0, r7, #1
 8000e72:	d1d6      	bne.n	8000e22 <_vfiprintf_r+0x19a>
 8000e74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e76:	07d9      	lsls	r1, r3, #31
 8000e78:	d405      	bmi.n	8000e86 <_vfiprintf_r+0x1fe>
 8000e7a:	89ab      	ldrh	r3, [r5, #12]
 8000e7c:	059a      	lsls	r2, r3, #22
 8000e7e:	d402      	bmi.n	8000e86 <_vfiprintf_r+0x1fe>
 8000e80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e82:	f7ff fddd 	bl	8000a40 <__retarget_lock_release_recursive>
 8000e86:	89ab      	ldrh	r3, [r5, #12]
 8000e88:	065b      	lsls	r3, r3, #25
 8000e8a:	f53f af1f 	bmi.w	8000ccc <_vfiprintf_r+0x44>
 8000e8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e90:	e71e      	b.n	8000cd0 <_vfiprintf_r+0x48>
 8000e92:	ab03      	add	r3, sp, #12
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	462a      	mov	r2, r5
 8000e98:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <_vfiprintf_r+0x228>)
 8000e9a:	a904      	add	r1, sp, #16
 8000e9c:	4630      	mov	r0, r6
 8000e9e:	f000 f879 	bl	8000f94 <_printf_i>
 8000ea2:	e7e4      	b.n	8000e6e <_vfiprintf_r+0x1e6>
 8000ea4:	080015a7 	.word	0x080015a7
 8000ea8:	080015b1 	.word	0x080015b1
 8000eac:	00000000 	.word	0x00000000
 8000eb0:	08000c63 	.word	0x08000c63
 8000eb4:	080015ad 	.word	0x080015ad

08000eb8 <_printf_common>:
 8000eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ebc:	4616      	mov	r6, r2
 8000ebe:	4698      	mov	r8, r3
 8000ec0:	688a      	ldr	r2, [r1, #8]
 8000ec2:	690b      	ldr	r3, [r1, #16]
 8000ec4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	bfb8      	it	lt
 8000ecc:	4613      	movlt	r3, r2
 8000ece:	6033      	str	r3, [r6, #0]
 8000ed0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000ed4:	4607      	mov	r7, r0
 8000ed6:	460c      	mov	r4, r1
 8000ed8:	b10a      	cbz	r2, 8000ede <_printf_common+0x26>
 8000eda:	3301      	adds	r3, #1
 8000edc:	6033      	str	r3, [r6, #0]
 8000ede:	6823      	ldr	r3, [r4, #0]
 8000ee0:	0699      	lsls	r1, r3, #26
 8000ee2:	bf42      	ittt	mi
 8000ee4:	6833      	ldrmi	r3, [r6, #0]
 8000ee6:	3302      	addmi	r3, #2
 8000ee8:	6033      	strmi	r3, [r6, #0]
 8000eea:	6825      	ldr	r5, [r4, #0]
 8000eec:	f015 0506 	ands.w	r5, r5, #6
 8000ef0:	d106      	bne.n	8000f00 <_printf_common+0x48>
 8000ef2:	f104 0a19 	add.w	sl, r4, #25
 8000ef6:	68e3      	ldr	r3, [r4, #12]
 8000ef8:	6832      	ldr	r2, [r6, #0]
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	42ab      	cmp	r3, r5
 8000efe:	dc26      	bgt.n	8000f4e <_printf_common+0x96>
 8000f00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000f04:	6822      	ldr	r2, [r4, #0]
 8000f06:	3b00      	subs	r3, #0
 8000f08:	bf18      	it	ne
 8000f0a:	2301      	movne	r3, #1
 8000f0c:	0692      	lsls	r2, r2, #26
 8000f0e:	d42b      	bmi.n	8000f68 <_printf_common+0xb0>
 8000f10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000f14:	4641      	mov	r1, r8
 8000f16:	4638      	mov	r0, r7
 8000f18:	47c8      	blx	r9
 8000f1a:	3001      	adds	r0, #1
 8000f1c:	d01e      	beq.n	8000f5c <_printf_common+0xa4>
 8000f1e:	6823      	ldr	r3, [r4, #0]
 8000f20:	6922      	ldr	r2, [r4, #16]
 8000f22:	f003 0306 	and.w	r3, r3, #6
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	bf02      	ittt	eq
 8000f2a:	68e5      	ldreq	r5, [r4, #12]
 8000f2c:	6833      	ldreq	r3, [r6, #0]
 8000f2e:	1aed      	subeq	r5, r5, r3
 8000f30:	68a3      	ldr	r3, [r4, #8]
 8000f32:	bf0c      	ite	eq
 8000f34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f38:	2500      	movne	r5, #0
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	bfc4      	itt	gt
 8000f3e:	1a9b      	subgt	r3, r3, r2
 8000f40:	18ed      	addgt	r5, r5, r3
 8000f42:	2600      	movs	r6, #0
 8000f44:	341a      	adds	r4, #26
 8000f46:	42b5      	cmp	r5, r6
 8000f48:	d11a      	bne.n	8000f80 <_printf_common+0xc8>
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	e008      	b.n	8000f60 <_printf_common+0xa8>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	4652      	mov	r2, sl
 8000f52:	4641      	mov	r1, r8
 8000f54:	4638      	mov	r0, r7
 8000f56:	47c8      	blx	r9
 8000f58:	3001      	adds	r0, #1
 8000f5a:	d103      	bne.n	8000f64 <_printf_common+0xac>
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f64:	3501      	adds	r5, #1
 8000f66:	e7c6      	b.n	8000ef6 <_printf_common+0x3e>
 8000f68:	18e1      	adds	r1, r4, r3
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	2030      	movs	r0, #48	@ 0x30
 8000f6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f72:	4422      	add	r2, r4
 8000f74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	e7c7      	b.n	8000f10 <_printf_common+0x58>
 8000f80:	2301      	movs	r3, #1
 8000f82:	4622      	mov	r2, r4
 8000f84:	4641      	mov	r1, r8
 8000f86:	4638      	mov	r0, r7
 8000f88:	47c8      	blx	r9
 8000f8a:	3001      	adds	r0, #1
 8000f8c:	d0e6      	beq.n	8000f5c <_printf_common+0xa4>
 8000f8e:	3601      	adds	r6, #1
 8000f90:	e7d9      	b.n	8000f46 <_printf_common+0x8e>
	...

08000f94 <_printf_i>:
 8000f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f98:	7e0f      	ldrb	r7, [r1, #24]
 8000f9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f9c:	2f78      	cmp	r7, #120	@ 0x78
 8000f9e:	4691      	mov	r9, r2
 8000fa0:	4680      	mov	r8, r0
 8000fa2:	460c      	mov	r4, r1
 8000fa4:	469a      	mov	sl, r3
 8000fa6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000faa:	d807      	bhi.n	8000fbc <_printf_i+0x28>
 8000fac:	2f62      	cmp	r7, #98	@ 0x62
 8000fae:	d80a      	bhi.n	8000fc6 <_printf_i+0x32>
 8000fb0:	2f00      	cmp	r7, #0
 8000fb2:	f000 80d2 	beq.w	800115a <_printf_i+0x1c6>
 8000fb6:	2f58      	cmp	r7, #88	@ 0x58
 8000fb8:	f000 80b9 	beq.w	800112e <_printf_i+0x19a>
 8000fbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000fc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000fc4:	e03a      	b.n	800103c <_printf_i+0xa8>
 8000fc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000fca:	2b15      	cmp	r3, #21
 8000fcc:	d8f6      	bhi.n	8000fbc <_printf_i+0x28>
 8000fce:	a101      	add	r1, pc, #4	@ (adr r1, 8000fd4 <_printf_i+0x40>)
 8000fd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000fd4:	0800102d 	.word	0x0800102d
 8000fd8:	08001041 	.word	0x08001041
 8000fdc:	08000fbd 	.word	0x08000fbd
 8000fe0:	08000fbd 	.word	0x08000fbd
 8000fe4:	08000fbd 	.word	0x08000fbd
 8000fe8:	08000fbd 	.word	0x08000fbd
 8000fec:	08001041 	.word	0x08001041
 8000ff0:	08000fbd 	.word	0x08000fbd
 8000ff4:	08000fbd 	.word	0x08000fbd
 8000ff8:	08000fbd 	.word	0x08000fbd
 8000ffc:	08000fbd 	.word	0x08000fbd
 8001000:	08001141 	.word	0x08001141
 8001004:	0800106b 	.word	0x0800106b
 8001008:	080010fb 	.word	0x080010fb
 800100c:	08000fbd 	.word	0x08000fbd
 8001010:	08000fbd 	.word	0x08000fbd
 8001014:	08001163 	.word	0x08001163
 8001018:	08000fbd 	.word	0x08000fbd
 800101c:	0800106b 	.word	0x0800106b
 8001020:	08000fbd 	.word	0x08000fbd
 8001024:	08000fbd 	.word	0x08000fbd
 8001028:	08001103 	.word	0x08001103
 800102c:	6833      	ldr	r3, [r6, #0]
 800102e:	1d1a      	adds	r2, r3, #4
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6032      	str	r2, [r6, #0]
 8001034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001038:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800103c:	2301      	movs	r3, #1
 800103e:	e09d      	b.n	800117c <_printf_i+0x1e8>
 8001040:	6833      	ldr	r3, [r6, #0]
 8001042:	6820      	ldr	r0, [r4, #0]
 8001044:	1d19      	adds	r1, r3, #4
 8001046:	6031      	str	r1, [r6, #0]
 8001048:	0606      	lsls	r6, r0, #24
 800104a:	d501      	bpl.n	8001050 <_printf_i+0xbc>
 800104c:	681d      	ldr	r5, [r3, #0]
 800104e:	e003      	b.n	8001058 <_printf_i+0xc4>
 8001050:	0645      	lsls	r5, r0, #25
 8001052:	d5fb      	bpl.n	800104c <_printf_i+0xb8>
 8001054:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001058:	2d00      	cmp	r5, #0
 800105a:	da03      	bge.n	8001064 <_printf_i+0xd0>
 800105c:	232d      	movs	r3, #45	@ 0x2d
 800105e:	426d      	negs	r5, r5
 8001060:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001064:	4859      	ldr	r0, [pc, #356]	@ (80011cc <_printf_i+0x238>)
 8001066:	230a      	movs	r3, #10
 8001068:	e011      	b.n	800108e <_printf_i+0xfa>
 800106a:	6821      	ldr	r1, [r4, #0]
 800106c:	6833      	ldr	r3, [r6, #0]
 800106e:	0608      	lsls	r0, r1, #24
 8001070:	f853 5b04 	ldr.w	r5, [r3], #4
 8001074:	d402      	bmi.n	800107c <_printf_i+0xe8>
 8001076:	0649      	lsls	r1, r1, #25
 8001078:	bf48      	it	mi
 800107a:	b2ad      	uxthmi	r5, r5
 800107c:	2f6f      	cmp	r7, #111	@ 0x6f
 800107e:	4853      	ldr	r0, [pc, #332]	@ (80011cc <_printf_i+0x238>)
 8001080:	6033      	str	r3, [r6, #0]
 8001082:	bf14      	ite	ne
 8001084:	230a      	movne	r3, #10
 8001086:	2308      	moveq	r3, #8
 8001088:	2100      	movs	r1, #0
 800108a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800108e:	6866      	ldr	r6, [r4, #4]
 8001090:	60a6      	str	r6, [r4, #8]
 8001092:	2e00      	cmp	r6, #0
 8001094:	bfa2      	ittt	ge
 8001096:	6821      	ldrge	r1, [r4, #0]
 8001098:	f021 0104 	bicge.w	r1, r1, #4
 800109c:	6021      	strge	r1, [r4, #0]
 800109e:	b90d      	cbnz	r5, 80010a4 <_printf_i+0x110>
 80010a0:	2e00      	cmp	r6, #0
 80010a2:	d04b      	beq.n	800113c <_printf_i+0x1a8>
 80010a4:	4616      	mov	r6, r2
 80010a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80010aa:	fb03 5711 	mls	r7, r3, r1, r5
 80010ae:	5dc7      	ldrb	r7, [r0, r7]
 80010b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80010b4:	462f      	mov	r7, r5
 80010b6:	42bb      	cmp	r3, r7
 80010b8:	460d      	mov	r5, r1
 80010ba:	d9f4      	bls.n	80010a6 <_printf_i+0x112>
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d10b      	bne.n	80010d8 <_printf_i+0x144>
 80010c0:	6823      	ldr	r3, [r4, #0]
 80010c2:	07df      	lsls	r7, r3, #31
 80010c4:	d508      	bpl.n	80010d8 <_printf_i+0x144>
 80010c6:	6923      	ldr	r3, [r4, #16]
 80010c8:	6861      	ldr	r1, [r4, #4]
 80010ca:	4299      	cmp	r1, r3
 80010cc:	bfde      	ittt	le
 80010ce:	2330      	movle	r3, #48	@ 0x30
 80010d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80010d4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80010d8:	1b92      	subs	r2, r2, r6
 80010da:	6122      	str	r2, [r4, #16]
 80010dc:	f8cd a000 	str.w	sl, [sp]
 80010e0:	464b      	mov	r3, r9
 80010e2:	aa03      	add	r2, sp, #12
 80010e4:	4621      	mov	r1, r4
 80010e6:	4640      	mov	r0, r8
 80010e8:	f7ff fee6 	bl	8000eb8 <_printf_common>
 80010ec:	3001      	adds	r0, #1
 80010ee:	d14a      	bne.n	8001186 <_printf_i+0x1f2>
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010f4:	b004      	add	sp, #16
 80010f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010fa:	6823      	ldr	r3, [r4, #0]
 80010fc:	f043 0320 	orr.w	r3, r3, #32
 8001100:	6023      	str	r3, [r4, #0]
 8001102:	4833      	ldr	r0, [pc, #204]	@ (80011d0 <_printf_i+0x23c>)
 8001104:	2778      	movs	r7, #120	@ 0x78
 8001106:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800110a:	6823      	ldr	r3, [r4, #0]
 800110c:	6831      	ldr	r1, [r6, #0]
 800110e:	061f      	lsls	r7, r3, #24
 8001110:	f851 5b04 	ldr.w	r5, [r1], #4
 8001114:	d402      	bmi.n	800111c <_printf_i+0x188>
 8001116:	065f      	lsls	r7, r3, #25
 8001118:	bf48      	it	mi
 800111a:	b2ad      	uxthmi	r5, r5
 800111c:	6031      	str	r1, [r6, #0]
 800111e:	07d9      	lsls	r1, r3, #31
 8001120:	bf44      	itt	mi
 8001122:	f043 0320 	orrmi.w	r3, r3, #32
 8001126:	6023      	strmi	r3, [r4, #0]
 8001128:	b11d      	cbz	r5, 8001132 <_printf_i+0x19e>
 800112a:	2310      	movs	r3, #16
 800112c:	e7ac      	b.n	8001088 <_printf_i+0xf4>
 800112e:	4827      	ldr	r0, [pc, #156]	@ (80011cc <_printf_i+0x238>)
 8001130:	e7e9      	b.n	8001106 <_printf_i+0x172>
 8001132:	6823      	ldr	r3, [r4, #0]
 8001134:	f023 0320 	bic.w	r3, r3, #32
 8001138:	6023      	str	r3, [r4, #0]
 800113a:	e7f6      	b.n	800112a <_printf_i+0x196>
 800113c:	4616      	mov	r6, r2
 800113e:	e7bd      	b.n	80010bc <_printf_i+0x128>
 8001140:	6833      	ldr	r3, [r6, #0]
 8001142:	6825      	ldr	r5, [r4, #0]
 8001144:	6961      	ldr	r1, [r4, #20]
 8001146:	1d18      	adds	r0, r3, #4
 8001148:	6030      	str	r0, [r6, #0]
 800114a:	062e      	lsls	r6, r5, #24
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	d501      	bpl.n	8001154 <_printf_i+0x1c0>
 8001150:	6019      	str	r1, [r3, #0]
 8001152:	e002      	b.n	800115a <_printf_i+0x1c6>
 8001154:	0668      	lsls	r0, r5, #25
 8001156:	d5fb      	bpl.n	8001150 <_printf_i+0x1bc>
 8001158:	8019      	strh	r1, [r3, #0]
 800115a:	2300      	movs	r3, #0
 800115c:	6123      	str	r3, [r4, #16]
 800115e:	4616      	mov	r6, r2
 8001160:	e7bc      	b.n	80010dc <_printf_i+0x148>
 8001162:	6833      	ldr	r3, [r6, #0]
 8001164:	1d1a      	adds	r2, r3, #4
 8001166:	6032      	str	r2, [r6, #0]
 8001168:	681e      	ldr	r6, [r3, #0]
 800116a:	6862      	ldr	r2, [r4, #4]
 800116c:	2100      	movs	r1, #0
 800116e:	4630      	mov	r0, r6
 8001170:	f7ff f836 	bl	80001e0 <memchr>
 8001174:	b108      	cbz	r0, 800117a <_printf_i+0x1e6>
 8001176:	1b80      	subs	r0, r0, r6
 8001178:	6060      	str	r0, [r4, #4]
 800117a:	6863      	ldr	r3, [r4, #4]
 800117c:	6123      	str	r3, [r4, #16]
 800117e:	2300      	movs	r3, #0
 8001180:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001184:	e7aa      	b.n	80010dc <_printf_i+0x148>
 8001186:	6923      	ldr	r3, [r4, #16]
 8001188:	4632      	mov	r2, r6
 800118a:	4649      	mov	r1, r9
 800118c:	4640      	mov	r0, r8
 800118e:	47d0      	blx	sl
 8001190:	3001      	adds	r0, #1
 8001192:	d0ad      	beq.n	80010f0 <_printf_i+0x15c>
 8001194:	6823      	ldr	r3, [r4, #0]
 8001196:	079b      	lsls	r3, r3, #30
 8001198:	d413      	bmi.n	80011c2 <_printf_i+0x22e>
 800119a:	68e0      	ldr	r0, [r4, #12]
 800119c:	9b03      	ldr	r3, [sp, #12]
 800119e:	4298      	cmp	r0, r3
 80011a0:	bfb8      	it	lt
 80011a2:	4618      	movlt	r0, r3
 80011a4:	e7a6      	b.n	80010f4 <_printf_i+0x160>
 80011a6:	2301      	movs	r3, #1
 80011a8:	4632      	mov	r2, r6
 80011aa:	4649      	mov	r1, r9
 80011ac:	4640      	mov	r0, r8
 80011ae:	47d0      	blx	sl
 80011b0:	3001      	adds	r0, #1
 80011b2:	d09d      	beq.n	80010f0 <_printf_i+0x15c>
 80011b4:	3501      	adds	r5, #1
 80011b6:	68e3      	ldr	r3, [r4, #12]
 80011b8:	9903      	ldr	r1, [sp, #12]
 80011ba:	1a5b      	subs	r3, r3, r1
 80011bc:	42ab      	cmp	r3, r5
 80011be:	dcf2      	bgt.n	80011a6 <_printf_i+0x212>
 80011c0:	e7eb      	b.n	800119a <_printf_i+0x206>
 80011c2:	2500      	movs	r5, #0
 80011c4:	f104 0619 	add.w	r6, r4, #25
 80011c8:	e7f5      	b.n	80011b6 <_printf_i+0x222>
 80011ca:	bf00      	nop
 80011cc:	080015b8 	.word	0x080015b8
 80011d0:	080015c9 	.word	0x080015c9

080011d4 <__sflush_r>:
 80011d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80011d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011dc:	0716      	lsls	r6, r2, #28
 80011de:	4605      	mov	r5, r0
 80011e0:	460c      	mov	r4, r1
 80011e2:	d454      	bmi.n	800128e <__sflush_r+0xba>
 80011e4:	684b      	ldr	r3, [r1, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	dc02      	bgt.n	80011f0 <__sflush_r+0x1c>
 80011ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	dd48      	ble.n	8001282 <__sflush_r+0xae>
 80011f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011f2:	2e00      	cmp	r6, #0
 80011f4:	d045      	beq.n	8001282 <__sflush_r+0xae>
 80011f6:	2300      	movs	r3, #0
 80011f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80011fc:	682f      	ldr	r7, [r5, #0]
 80011fe:	6a21      	ldr	r1, [r4, #32]
 8001200:	602b      	str	r3, [r5, #0]
 8001202:	d030      	beq.n	8001266 <__sflush_r+0x92>
 8001204:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001206:	89a3      	ldrh	r3, [r4, #12]
 8001208:	0759      	lsls	r1, r3, #29
 800120a:	d505      	bpl.n	8001218 <__sflush_r+0x44>
 800120c:	6863      	ldr	r3, [r4, #4]
 800120e:	1ad2      	subs	r2, r2, r3
 8001210:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001212:	b10b      	cbz	r3, 8001218 <__sflush_r+0x44>
 8001214:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001216:	1ad2      	subs	r2, r2, r3
 8001218:	2300      	movs	r3, #0
 800121a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800121c:	6a21      	ldr	r1, [r4, #32]
 800121e:	4628      	mov	r0, r5
 8001220:	47b0      	blx	r6
 8001222:	1c43      	adds	r3, r0, #1
 8001224:	89a3      	ldrh	r3, [r4, #12]
 8001226:	d106      	bne.n	8001236 <__sflush_r+0x62>
 8001228:	6829      	ldr	r1, [r5, #0]
 800122a:	291d      	cmp	r1, #29
 800122c:	d82b      	bhi.n	8001286 <__sflush_r+0xb2>
 800122e:	4a2a      	ldr	r2, [pc, #168]	@ (80012d8 <__sflush_r+0x104>)
 8001230:	410a      	asrs	r2, r1
 8001232:	07d6      	lsls	r6, r2, #31
 8001234:	d427      	bmi.n	8001286 <__sflush_r+0xb2>
 8001236:	2200      	movs	r2, #0
 8001238:	6062      	str	r2, [r4, #4]
 800123a:	04d9      	lsls	r1, r3, #19
 800123c:	6922      	ldr	r2, [r4, #16]
 800123e:	6022      	str	r2, [r4, #0]
 8001240:	d504      	bpl.n	800124c <__sflush_r+0x78>
 8001242:	1c42      	adds	r2, r0, #1
 8001244:	d101      	bne.n	800124a <__sflush_r+0x76>
 8001246:	682b      	ldr	r3, [r5, #0]
 8001248:	b903      	cbnz	r3, 800124c <__sflush_r+0x78>
 800124a:	6560      	str	r0, [r4, #84]	@ 0x54
 800124c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800124e:	602f      	str	r7, [r5, #0]
 8001250:	b1b9      	cbz	r1, 8001282 <__sflush_r+0xae>
 8001252:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001256:	4299      	cmp	r1, r3
 8001258:	d002      	beq.n	8001260 <__sflush_r+0x8c>
 800125a:	4628      	mov	r0, r5
 800125c:	f7ff fbf2 	bl	8000a44 <_free_r>
 8001260:	2300      	movs	r3, #0
 8001262:	6363      	str	r3, [r4, #52]	@ 0x34
 8001264:	e00d      	b.n	8001282 <__sflush_r+0xae>
 8001266:	2301      	movs	r3, #1
 8001268:	4628      	mov	r0, r5
 800126a:	47b0      	blx	r6
 800126c:	4602      	mov	r2, r0
 800126e:	1c50      	adds	r0, r2, #1
 8001270:	d1c9      	bne.n	8001206 <__sflush_r+0x32>
 8001272:	682b      	ldr	r3, [r5, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0c6      	beq.n	8001206 <__sflush_r+0x32>
 8001278:	2b1d      	cmp	r3, #29
 800127a:	d001      	beq.n	8001280 <__sflush_r+0xac>
 800127c:	2b16      	cmp	r3, #22
 800127e:	d11e      	bne.n	80012be <__sflush_r+0xea>
 8001280:	602f      	str	r7, [r5, #0]
 8001282:	2000      	movs	r0, #0
 8001284:	e022      	b.n	80012cc <__sflush_r+0xf8>
 8001286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800128a:	b21b      	sxth	r3, r3
 800128c:	e01b      	b.n	80012c6 <__sflush_r+0xf2>
 800128e:	690f      	ldr	r7, [r1, #16]
 8001290:	2f00      	cmp	r7, #0
 8001292:	d0f6      	beq.n	8001282 <__sflush_r+0xae>
 8001294:	0793      	lsls	r3, r2, #30
 8001296:	680e      	ldr	r6, [r1, #0]
 8001298:	bf08      	it	eq
 800129a:	694b      	ldreq	r3, [r1, #20]
 800129c:	600f      	str	r7, [r1, #0]
 800129e:	bf18      	it	ne
 80012a0:	2300      	movne	r3, #0
 80012a2:	eba6 0807 	sub.w	r8, r6, r7
 80012a6:	608b      	str	r3, [r1, #8]
 80012a8:	f1b8 0f00 	cmp.w	r8, #0
 80012ac:	dde9      	ble.n	8001282 <__sflush_r+0xae>
 80012ae:	6a21      	ldr	r1, [r4, #32]
 80012b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80012b2:	4643      	mov	r3, r8
 80012b4:	463a      	mov	r2, r7
 80012b6:	4628      	mov	r0, r5
 80012b8:	47b0      	blx	r6
 80012ba:	2800      	cmp	r0, #0
 80012bc:	dc08      	bgt.n	80012d0 <__sflush_r+0xfc>
 80012be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012c6:	81a3      	strh	r3, [r4, #12]
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012d0:	4407      	add	r7, r0
 80012d2:	eba8 0800 	sub.w	r8, r8, r0
 80012d6:	e7e7      	b.n	80012a8 <__sflush_r+0xd4>
 80012d8:	dfbffffe 	.word	0xdfbffffe

080012dc <_fflush_r>:
 80012dc:	b538      	push	{r3, r4, r5, lr}
 80012de:	690b      	ldr	r3, [r1, #16]
 80012e0:	4605      	mov	r5, r0
 80012e2:	460c      	mov	r4, r1
 80012e4:	b913      	cbnz	r3, 80012ec <_fflush_r+0x10>
 80012e6:	2500      	movs	r5, #0
 80012e8:	4628      	mov	r0, r5
 80012ea:	bd38      	pop	{r3, r4, r5, pc}
 80012ec:	b118      	cbz	r0, 80012f6 <_fflush_r+0x1a>
 80012ee:	6a03      	ldr	r3, [r0, #32]
 80012f0:	b90b      	cbnz	r3, 80012f6 <_fflush_r+0x1a>
 80012f2:	f7ff fa9f 	bl	8000834 <__sinit>
 80012f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f3      	beq.n	80012e6 <_fflush_r+0xa>
 80012fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001300:	07d0      	lsls	r0, r2, #31
 8001302:	d404      	bmi.n	800130e <_fflush_r+0x32>
 8001304:	0599      	lsls	r1, r3, #22
 8001306:	d402      	bmi.n	800130e <_fflush_r+0x32>
 8001308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800130a:	f7ff fb98 	bl	8000a3e <__retarget_lock_acquire_recursive>
 800130e:	4628      	mov	r0, r5
 8001310:	4621      	mov	r1, r4
 8001312:	f7ff ff5f 	bl	80011d4 <__sflush_r>
 8001316:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001318:	07da      	lsls	r2, r3, #31
 800131a:	4605      	mov	r5, r0
 800131c:	d4e4      	bmi.n	80012e8 <_fflush_r+0xc>
 800131e:	89a3      	ldrh	r3, [r4, #12]
 8001320:	059b      	lsls	r3, r3, #22
 8001322:	d4e1      	bmi.n	80012e8 <_fflush_r+0xc>
 8001324:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001326:	f7ff fb8b 	bl	8000a40 <__retarget_lock_release_recursive>
 800132a:	e7dd      	b.n	80012e8 <_fflush_r+0xc>

0800132c <__swbuf_r>:
 800132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800132e:	460e      	mov	r6, r1
 8001330:	4614      	mov	r4, r2
 8001332:	4605      	mov	r5, r0
 8001334:	b118      	cbz	r0, 800133e <__swbuf_r+0x12>
 8001336:	6a03      	ldr	r3, [r0, #32]
 8001338:	b90b      	cbnz	r3, 800133e <__swbuf_r+0x12>
 800133a:	f7ff fa7b 	bl	8000834 <__sinit>
 800133e:	69a3      	ldr	r3, [r4, #24]
 8001340:	60a3      	str	r3, [r4, #8]
 8001342:	89a3      	ldrh	r3, [r4, #12]
 8001344:	071a      	lsls	r2, r3, #28
 8001346:	d501      	bpl.n	800134c <__swbuf_r+0x20>
 8001348:	6923      	ldr	r3, [r4, #16]
 800134a:	b943      	cbnz	r3, 800135e <__swbuf_r+0x32>
 800134c:	4621      	mov	r1, r4
 800134e:	4628      	mov	r0, r5
 8001350:	f000 f82a 	bl	80013a8 <__swsetup_r>
 8001354:	b118      	cbz	r0, 800135e <__swbuf_r+0x32>
 8001356:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800135a:	4638      	mov	r0, r7
 800135c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800135e:	6823      	ldr	r3, [r4, #0]
 8001360:	6922      	ldr	r2, [r4, #16]
 8001362:	1a98      	subs	r0, r3, r2
 8001364:	6963      	ldr	r3, [r4, #20]
 8001366:	b2f6      	uxtb	r6, r6
 8001368:	4283      	cmp	r3, r0
 800136a:	4637      	mov	r7, r6
 800136c:	dc05      	bgt.n	800137a <__swbuf_r+0x4e>
 800136e:	4621      	mov	r1, r4
 8001370:	4628      	mov	r0, r5
 8001372:	f7ff ffb3 	bl	80012dc <_fflush_r>
 8001376:	2800      	cmp	r0, #0
 8001378:	d1ed      	bne.n	8001356 <__swbuf_r+0x2a>
 800137a:	68a3      	ldr	r3, [r4, #8]
 800137c:	3b01      	subs	r3, #1
 800137e:	60a3      	str	r3, [r4, #8]
 8001380:	6823      	ldr	r3, [r4, #0]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	6022      	str	r2, [r4, #0]
 8001386:	701e      	strb	r6, [r3, #0]
 8001388:	6962      	ldr	r2, [r4, #20]
 800138a:	1c43      	adds	r3, r0, #1
 800138c:	429a      	cmp	r2, r3
 800138e:	d004      	beq.n	800139a <__swbuf_r+0x6e>
 8001390:	89a3      	ldrh	r3, [r4, #12]
 8001392:	07db      	lsls	r3, r3, #31
 8001394:	d5e1      	bpl.n	800135a <__swbuf_r+0x2e>
 8001396:	2e0a      	cmp	r6, #10
 8001398:	d1df      	bne.n	800135a <__swbuf_r+0x2e>
 800139a:	4621      	mov	r1, r4
 800139c:	4628      	mov	r0, r5
 800139e:	f7ff ff9d 	bl	80012dc <_fflush_r>
 80013a2:	2800      	cmp	r0, #0
 80013a4:	d0d9      	beq.n	800135a <__swbuf_r+0x2e>
 80013a6:	e7d6      	b.n	8001356 <__swbuf_r+0x2a>

080013a8 <__swsetup_r>:
 80013a8:	b538      	push	{r3, r4, r5, lr}
 80013aa:	4b29      	ldr	r3, [pc, #164]	@ (8001450 <__swsetup_r+0xa8>)
 80013ac:	4605      	mov	r5, r0
 80013ae:	6818      	ldr	r0, [r3, #0]
 80013b0:	460c      	mov	r4, r1
 80013b2:	b118      	cbz	r0, 80013bc <__swsetup_r+0x14>
 80013b4:	6a03      	ldr	r3, [r0, #32]
 80013b6:	b90b      	cbnz	r3, 80013bc <__swsetup_r+0x14>
 80013b8:	f7ff fa3c 	bl	8000834 <__sinit>
 80013bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013c0:	0719      	lsls	r1, r3, #28
 80013c2:	d422      	bmi.n	800140a <__swsetup_r+0x62>
 80013c4:	06da      	lsls	r2, r3, #27
 80013c6:	d407      	bmi.n	80013d8 <__swsetup_r+0x30>
 80013c8:	2209      	movs	r2, #9
 80013ca:	602a      	str	r2, [r5, #0]
 80013cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013d0:	81a3      	strh	r3, [r4, #12]
 80013d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013d6:	e033      	b.n	8001440 <__swsetup_r+0x98>
 80013d8:	0758      	lsls	r0, r3, #29
 80013da:	d512      	bpl.n	8001402 <__swsetup_r+0x5a>
 80013dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80013de:	b141      	cbz	r1, 80013f2 <__swsetup_r+0x4a>
 80013e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80013e4:	4299      	cmp	r1, r3
 80013e6:	d002      	beq.n	80013ee <__swsetup_r+0x46>
 80013e8:	4628      	mov	r0, r5
 80013ea:	f7ff fb2b 	bl	8000a44 <_free_r>
 80013ee:	2300      	movs	r3, #0
 80013f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80013f2:	89a3      	ldrh	r3, [r4, #12]
 80013f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80013f8:	81a3      	strh	r3, [r4, #12]
 80013fa:	2300      	movs	r3, #0
 80013fc:	6063      	str	r3, [r4, #4]
 80013fe:	6923      	ldr	r3, [r4, #16]
 8001400:	6023      	str	r3, [r4, #0]
 8001402:	89a3      	ldrh	r3, [r4, #12]
 8001404:	f043 0308 	orr.w	r3, r3, #8
 8001408:	81a3      	strh	r3, [r4, #12]
 800140a:	6923      	ldr	r3, [r4, #16]
 800140c:	b94b      	cbnz	r3, 8001422 <__swsetup_r+0x7a>
 800140e:	89a3      	ldrh	r3, [r4, #12]
 8001410:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001414:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001418:	d003      	beq.n	8001422 <__swsetup_r+0x7a>
 800141a:	4621      	mov	r1, r4
 800141c:	4628      	mov	r0, r5
 800141e:	f000 f84f 	bl	80014c0 <__smakebuf_r>
 8001422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001426:	f013 0201 	ands.w	r2, r3, #1
 800142a:	d00a      	beq.n	8001442 <__swsetup_r+0x9a>
 800142c:	2200      	movs	r2, #0
 800142e:	60a2      	str	r2, [r4, #8]
 8001430:	6962      	ldr	r2, [r4, #20]
 8001432:	4252      	negs	r2, r2
 8001434:	61a2      	str	r2, [r4, #24]
 8001436:	6922      	ldr	r2, [r4, #16]
 8001438:	b942      	cbnz	r2, 800144c <__swsetup_r+0xa4>
 800143a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800143e:	d1c5      	bne.n	80013cc <__swsetup_r+0x24>
 8001440:	bd38      	pop	{r3, r4, r5, pc}
 8001442:	0799      	lsls	r1, r3, #30
 8001444:	bf58      	it	pl
 8001446:	6962      	ldrpl	r2, [r4, #20]
 8001448:	60a2      	str	r2, [r4, #8]
 800144a:	e7f4      	b.n	8001436 <__swsetup_r+0x8e>
 800144c:	2000      	movs	r0, #0
 800144e:	e7f7      	b.n	8001440 <__swsetup_r+0x98>
 8001450:	2000000c 	.word	0x2000000c

08001454 <_sbrk_r>:
 8001454:	b538      	push	{r3, r4, r5, lr}
 8001456:	4d06      	ldr	r5, [pc, #24]	@ (8001470 <_sbrk_r+0x1c>)
 8001458:	2300      	movs	r3, #0
 800145a:	4604      	mov	r4, r0
 800145c:	4608      	mov	r0, r1
 800145e:	602b      	str	r3, [r5, #0]
 8001460:	f7ff f83c 	bl	80004dc <_sbrk>
 8001464:	1c43      	adds	r3, r0, #1
 8001466:	d102      	bne.n	800146e <_sbrk_r+0x1a>
 8001468:	682b      	ldr	r3, [r5, #0]
 800146a:	b103      	cbz	r3, 800146e <_sbrk_r+0x1a>
 800146c:	6023      	str	r3, [r4, #0]
 800146e:	bd38      	pop	{r3, r4, r5, pc}
 8001470:	200001bc 	.word	0x200001bc

08001474 <__swhatbuf_r>:
 8001474:	b570      	push	{r4, r5, r6, lr}
 8001476:	460c      	mov	r4, r1
 8001478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800147c:	2900      	cmp	r1, #0
 800147e:	b096      	sub	sp, #88	@ 0x58
 8001480:	4615      	mov	r5, r2
 8001482:	461e      	mov	r6, r3
 8001484:	da0d      	bge.n	80014a2 <__swhatbuf_r+0x2e>
 8001486:	89a3      	ldrh	r3, [r4, #12]
 8001488:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800148c:	f04f 0100 	mov.w	r1, #0
 8001490:	bf14      	ite	ne
 8001492:	2340      	movne	r3, #64	@ 0x40
 8001494:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001498:	2000      	movs	r0, #0
 800149a:	6031      	str	r1, [r6, #0]
 800149c:	602b      	str	r3, [r5, #0]
 800149e:	b016      	add	sp, #88	@ 0x58
 80014a0:	bd70      	pop	{r4, r5, r6, pc}
 80014a2:	466a      	mov	r2, sp
 80014a4:	f000 f848 	bl	8001538 <_fstat_r>
 80014a8:	2800      	cmp	r0, #0
 80014aa:	dbec      	blt.n	8001486 <__swhatbuf_r+0x12>
 80014ac:	9901      	ldr	r1, [sp, #4]
 80014ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80014b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80014b6:	4259      	negs	r1, r3
 80014b8:	4159      	adcs	r1, r3
 80014ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014be:	e7eb      	b.n	8001498 <__swhatbuf_r+0x24>

080014c0 <__smakebuf_r>:
 80014c0:	898b      	ldrh	r3, [r1, #12]
 80014c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014c4:	079d      	lsls	r5, r3, #30
 80014c6:	4606      	mov	r6, r0
 80014c8:	460c      	mov	r4, r1
 80014ca:	d507      	bpl.n	80014dc <__smakebuf_r+0x1c>
 80014cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80014d0:	6023      	str	r3, [r4, #0]
 80014d2:	6123      	str	r3, [r4, #16]
 80014d4:	2301      	movs	r3, #1
 80014d6:	6163      	str	r3, [r4, #20]
 80014d8:	b003      	add	sp, #12
 80014da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014dc:	ab01      	add	r3, sp, #4
 80014de:	466a      	mov	r2, sp
 80014e0:	f7ff ffc8 	bl	8001474 <__swhatbuf_r>
 80014e4:	9f00      	ldr	r7, [sp, #0]
 80014e6:	4605      	mov	r5, r0
 80014e8:	4639      	mov	r1, r7
 80014ea:	4630      	mov	r0, r6
 80014ec:	f7ff fb16 	bl	8000b1c <_malloc_r>
 80014f0:	b948      	cbnz	r0, 8001506 <__smakebuf_r+0x46>
 80014f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014f6:	059a      	lsls	r2, r3, #22
 80014f8:	d4ee      	bmi.n	80014d8 <__smakebuf_r+0x18>
 80014fa:	f023 0303 	bic.w	r3, r3, #3
 80014fe:	f043 0302 	orr.w	r3, r3, #2
 8001502:	81a3      	strh	r3, [r4, #12]
 8001504:	e7e2      	b.n	80014cc <__smakebuf_r+0xc>
 8001506:	89a3      	ldrh	r3, [r4, #12]
 8001508:	6020      	str	r0, [r4, #0]
 800150a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800150e:	81a3      	strh	r3, [r4, #12]
 8001510:	9b01      	ldr	r3, [sp, #4]
 8001512:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001516:	b15b      	cbz	r3, 8001530 <__smakebuf_r+0x70>
 8001518:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800151c:	4630      	mov	r0, r6
 800151e:	f000 f81d 	bl	800155c <_isatty_r>
 8001522:	b128      	cbz	r0, 8001530 <__smakebuf_r+0x70>
 8001524:	89a3      	ldrh	r3, [r4, #12]
 8001526:	f023 0303 	bic.w	r3, r3, #3
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	81a3      	strh	r3, [r4, #12]
 8001530:	89a3      	ldrh	r3, [r4, #12]
 8001532:	431d      	orrs	r5, r3
 8001534:	81a5      	strh	r5, [r4, #12]
 8001536:	e7cf      	b.n	80014d8 <__smakebuf_r+0x18>

08001538 <_fstat_r>:
 8001538:	b538      	push	{r3, r4, r5, lr}
 800153a:	4d07      	ldr	r5, [pc, #28]	@ (8001558 <_fstat_r+0x20>)
 800153c:	2300      	movs	r3, #0
 800153e:	4604      	mov	r4, r0
 8001540:	4608      	mov	r0, r1
 8001542:	4611      	mov	r1, r2
 8001544:	602b      	str	r3, [r5, #0]
 8001546:	f7fe ffa0 	bl	800048a <_fstat>
 800154a:	1c43      	adds	r3, r0, #1
 800154c:	d102      	bne.n	8001554 <_fstat_r+0x1c>
 800154e:	682b      	ldr	r3, [r5, #0]
 8001550:	b103      	cbz	r3, 8001554 <_fstat_r+0x1c>
 8001552:	6023      	str	r3, [r4, #0]
 8001554:	bd38      	pop	{r3, r4, r5, pc}
 8001556:	bf00      	nop
 8001558:	200001bc 	.word	0x200001bc

0800155c <_isatty_r>:
 800155c:	b538      	push	{r3, r4, r5, lr}
 800155e:	4d06      	ldr	r5, [pc, #24]	@ (8001578 <_isatty_r+0x1c>)
 8001560:	2300      	movs	r3, #0
 8001562:	4604      	mov	r4, r0
 8001564:	4608      	mov	r0, r1
 8001566:	602b      	str	r3, [r5, #0]
 8001568:	f7fe ff9f 	bl	80004aa <_isatty>
 800156c:	1c43      	adds	r3, r0, #1
 800156e:	d102      	bne.n	8001576 <_isatty_r+0x1a>
 8001570:	682b      	ldr	r3, [r5, #0]
 8001572:	b103      	cbz	r3, 8001576 <_isatty_r+0x1a>
 8001574:	6023      	str	r3, [r4, #0]
 8001576:	bd38      	pop	{r3, r4, r5, pc}
 8001578:	200001bc 	.word	0x200001bc

0800157c <_init>:
 800157c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800157e:	bf00      	nop
 8001580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001582:	bc08      	pop	{r3}
 8001584:	469e      	mov	lr, r3
 8001586:	4770      	bx	lr

08001588 <_fini>:
 8001588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800158a:	bf00      	nop
 800158c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800158e:	bc08      	pop	{r3}
 8001590:	469e      	mov	lr, r3
 8001592:	4770      	bx	lr
